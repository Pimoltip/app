// lib/pages/appoinment_page.dart
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'project_calendar.dart';
import 'add_event_page.dart'; // ‚úÖ import AddEventPage
import '../models/important_day.dart';
import '../repo/project_repository.dart';
import '../repo/event_repository.dart';
import '../services/auth_service.dart';
import '../services/recurring_event_service.dart';

/// ===================
/// Appointment Page (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ProjectCalendar)
/// ===================
class AppointmentPage extends StatefulWidget {
  final DateTime selectedDate; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å ProjectCalendar

  const AppointmentPage({super.key, required this.selectedDate});

  @override
  State<AppointmentPage> createState() => _AppointmentPageState();
}

class _AppointmentPageState extends State<AppointmentPage> {
  // state ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  late DateTime _today;
  late List<DateTime> _weekDays; // 7 ‡∏ß‡∏±‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
  int _selectedIndex = 3; // 0=Sun..6=Sat‡∏û

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ProjectCalendar
  List<ImportantDay> _allDays = [];

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ time (‡πÉ‡∏ä‡πâ‡∏•‡∏á timeline)
  List<_TimedItem> _timedEventsForSelectedDay = [];
  List<ImportantDay> _allDayEventsForSelectedDay = [];

  // Repository instances
  final ProjectRepository _projectRepo = ProjectRepository();
  final EventRepository _eventRepo = EventRepository();
  final AuthService _authService = AuthService();
  final RecurringEventService _recurringEventService = RecurringEventService();

  @override
  void initState() {
    super.initState();
    _today = widget.selectedDate;
    _weekDays = _buildWeekOf(_today);

    // ‡∏ß‡∏≤‡∏á index ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    final wd = (_today.weekday) % 7; // 1..7 ‚Üí 0..6 (Sun=0)
    _selectedIndex = wd;

    _loadAllData().then((_) => _rebuildSelectedDayLists());
  }

  // -----------------------------
  // Load data ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ProjectCalendar
  // -----------------------------
  Future<void> _loadAllData() async {
    try {
      // üîê ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final currentUser = await _authService.getCurrentUser();
      if (currentUser == null) {
        debugPrint('‚ùå No user logged in');
        return;
      }

      // ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å assets
      final impData = await rootBundle.loadString('assets/important_days.json');
      final kuData = await rootBundle.loadString('assets/ku_calendar.json');
      final evtData = await rootBundle.loadString('assets/events.json');

      final List impJson = json.decode(impData) as List;
      final List kuJson = json.decode(kuData) as List;
      final List evtJson = json.decode(evtData) as List;

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite (‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° user_id)
      final sqliteProjects = await _projectRepo.loadProjects(currentUser.id!);
      final sqliteEvents = await _eventRepo.loadEvents(currentUser.id!);

      // map ‚Üí ImportantDay (‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ProjectCalendar)
      final impDays = impJson.map(
        (e) => ImportantDay(
          title: e['title'],
          date: e['date'],
          description: e['description'] ?? '',
          color: '#FFA726', // ‡∏™‡πâ‡∏°: important
        ),
      );

      final kuDays = kuJson.map(
        (e) => ImportantDay(
          title: e['title'],
          date: e['date'],
          description: e['description'] ?? '',
          color: '#4CAF50', // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß: KU
        ),
      );

      // ‚úÖ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏≤‡∏Å SQLite
      final projDays = sqliteProjects
          .where((p) => p.deadline != null && p.deadline!.isNotEmpty)
          .map(
            (p) => ImportantDay(
              title: p.name,
              date: p.deadline!,
              description:
                  "Progress: ${p.progress}% | Members: ${p.members.join(', ')}",
              color: '#9C27B0', // ‡∏°‡πà‡∏ß‡∏á: deadline ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
            ),
          );

      // ‚úÖ system events ‡∏à‡∏≤‡∏Å assets/events.json
      final sysEvents = evtJson.map(
        (e) => ImportantDay(
          title: e['title'] ?? 'System Event',
          date: e['date'],
          description: e['note'] ?? '',
          color: '#42A5F5',
        ),
      );

      // ‚úÖ ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å SQLite
      final userEvents = sqliteEvents.map(
        (e) => ImportantDay(
          title: e.title,
          date:
              "${e.date.year.toString().padLeft(4, '0')}-${e.date.month.toString().padLeft(2, '0')}-${e.date.day.toString().padLeft(2, '0')}",
          description: e.description,
          color: '#03A9F4', // ‡∏ü‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡∏ó‡∏∞‡πÄ‡∏•: user
        ),
      );

      setState(() {
        _allDays = [
          ...impDays,
          ...kuDays,
          ...sysEvents,
          ...projDays,
          ...userEvents,
        ];
      });
    } catch (e) {
      debugPrint('Appointment::_loadAllData error: $e');
    }
  }

  // -----------------------------
  // Build week / helpers
  // -----------------------------
  List<DateTime> _buildWeekOf(DateTime ref) {
    // ‡∏´‡∏≤ "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå" ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (Sun=0)
    final sunday = ref.subtract(Duration(days: ref.weekday % 7));
    return List.generate(
      7,
      (i) => DateTime(sunday.year, sunday.month, sunday.day + i),
    );
  }

  String _ymd(DateTime d) =>
      '${d.year.toString().padLeft(4, '0')}-${d.month.toString().padLeft(2, '0')}-${d.day.toString().padLeft(2, '0')}';

  String _weekdayShort(int weekday) {
    switch (weekday) {
      case DateTime.sunday:
        return 'Sun';
      case DateTime.monday:
        return 'Mon';
      case DateTime.tuesday:
        return 'Tue';
      case DateTime.wednesday:
        return 'Wed';
      case DateTime.thursday:
        return 'Thu';
      case DateTime.friday:
        return 'Fri';
      case DateTime.saturday:
        return 'Sat';
      default:
        return '';
    }
  }

  // -----------------------------
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timeline
  //   - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ time: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô _timedEventsForSelectedDay
  //   - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ time: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô _allDayEventsForSelectedDay
  // -----------------------------
  Future<void> _rebuildSelectedDayLists() async {
    final day = _weekDays[_selectedIndex];
    final key = _ymd(day);

    // üîê ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    final currentUser = await _authService.getCurrentUser();
    if (currentUser == null) {
      debugPrint('‚ùå No user logged in');
      return;
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏£‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ã‡πâ‡∏≥)
    final eventsForDay = await _recurringEventService.getEventsForDate(
      currentUser.id!,
      day,
    );

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á map "date -> list of time items" ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    final timed = <_TimedItem>[];

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏õ‡πá‡∏ô TimedItem
    for (final e in eventsForDay) {
      final eventDate = _ymd(e.date);
      if (eventDate == key) {
        timed.add(
          _TimedItem(
            hour: e.date.hour,
            minute: e.date.minute,
            title: e.title,
            detail: e.description,
            colorHex: e.isRecurring
                ? '#FF9800'
                : '#03A9F4', // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ã‡πâ‡∏≥
          ),
        );
      }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° All-day (‡∏ó‡∏∏‡∏Å‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà "‡πÑ‡∏°‡πà‡∏°‡∏µ time") ‡∏à‡∏≤‡∏Å _allDays ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á
    final allDay = _allDays.where((d) => d.date == key).where((d) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ time ‡πÉ‡∏ô d.description ‡πÇ‡∏î‡∏¢‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå (ImportantDay ‡πÑ‡∏°‡πà‡∏°‡∏µ field time)
      // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô treat ‡πÄ‡∏õ‡πá‡∏ô All-day ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      // (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å text ‡∏Å‡πá‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡πå‡∏™‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ)
      return true;
    }).toList();

    // sort timeline ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (hour/minute null ‚Üí ‡∏î‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢)
    timed.sort((a, b) {
      final ak = (a.hour ?? 99) * 60 + (a.minute ?? 99);
      final bk = (b.hour ?? 99) * 60 + (b.minute ?? 99);
      return ak.compareTo(bk);
    });

    setState(() {
      _timedEventsForSelectedDay = timed;
      _allDayEventsForSelectedDay = allDay;
    });
  }

  // -----------------------------
  // Build
  // -----------------------------
  @override
  Widget build(BuildContext context) {
    final d = _weekDays[_selectedIndex];
    final title =
        'Appointment ‚Äî ${d.day}/${d.month}/${d.year} (${_weekdayShort(d.weekday)})';

    return Scaffold(
      backgroundColor: const Color(0xFFF6F2E9),
      appBar: AppBar(
        backgroundColor: const Color(0xFFF6F2E9),
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.calendar_month),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (_) => const ProjectCalendar()),
            );
          },
        ),
        title: Text(title, style: const TextStyle(color: Colors.black)),
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.add, color: Colors.green),
            onPressed: () async {
              final scaffoldMessenger = ScaffoldMessenger.of(context);
              final selectedDay = _weekDays[_selectedIndex];
              final result = await Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => AddEventPage(
                    selectedDate: selectedDay,
                    isWeeklyEvent: true,
                  ),
                ),
              );

              // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° event ‡πÉ‡∏´‡∏°‡πà
              if (result == true && mounted) {
                await _loadAllData();
                await _rebuildSelectedDayLists();
                scaffoldMessenger.showSnackBar(
                  const SnackBar(
                    content: Text("‡πÄ‡∏û‡∏¥‡πà‡∏° Weekly Event ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß! üéâ"),
                    backgroundColor: Colors.green,
                  ),
                );
              }
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
          _DaySelectorBar(
            weekDays: _weekDays,
            selectedIndex: _selectedIndex,
            onSelected: (i) async {
              setState(() => _selectedIndex = i);
              await _rebuildSelectedDayLists();
            },
          ),
          const SizedBox(height: 12),

          // All-day events
          if (_allDayEventsForSelectedDay.isNotEmpty)
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 4, 16, 8),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'All-day',
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                  const SizedBox(height: 8),
                  ..._allDayEventsForSelectedDay.map(
                    (e) => _EventPill(
                      title: e.title,
                      detail: e.description,
                      color: _safeColor(e.color),
                    ),
                  ),
                ],
              ),
            ),

          // Timeline 00‚Äì23
          Expanded(
            child: Container(
              margin: const EdgeInsets.symmetric(horizontal: 16),
              padding: const EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                color: const Color(0xFFDFF2D8),
                borderRadius: BorderRadius.circular(16),
              ),
              child: _TimelineView(items: _timedEventsForSelectedDay),
            ),
          ),
        ],
      ),
    );
  }

  Color _safeColor(String? hex) {
    try {
      return Color(int.parse((hex ?? '#9E9E9E').replaceFirst('#', '0xff')));
    } catch (_) {
      return Colors.grey;
    }
  }
}

/// ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå..‡πÄ‡∏™‡∏≤‡∏£‡πå)
class _DaySelectorBar extends StatelessWidget {
  final List<DateTime> weekDays;
  final int selectedIndex;
  final void Function(int) onSelected;

  const _DaySelectorBar({
    required this.weekDays,
    required this.selectedIndex,
    required this.onSelected,
  });

  String _weekdayShort(int weekday) {
    switch (weekday) {
      case DateTime.sunday:
        return 'Sun';
      case DateTime.monday:
        return 'Mon';
      case DateTime.tuesday:
        return 'Tue';
      case DateTime.wednesday:
        return 'Wed';
      case DateTime.thursday:
        return 'Thu';
      case DateTime.friday:
        return 'Fri';
      case DateTime.saturday:
        return 'Sat';
      default:
        return '';
    }
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 78,
      child: ListView.separated(
        scrollDirection: Axis.horizontal,
        padding: const EdgeInsets.symmetric(horizontal: 16),
        itemCount: weekDays.length,
        separatorBuilder: (_, __) => const SizedBox(width: 8),
        itemBuilder: (context, i) {
          final d = weekDays[i];
          final isSelected = i == selectedIndex;
          return InkWell(
            borderRadius: BorderRadius.circular(12),
            onTap: () => onSelected(i),
            child: Container(
              width: 74,
              decoration: BoxDecoration(
                color: isSelected ? Colors.green : Colors.grey.shade200,
                borderRadius: BorderRadius.circular(12),
              ),
              alignment: Alignment.center,
              child: Text(
                '${d.day} ${_weekdayShort(d.weekday)}',
                style: TextStyle(
                  color: isSelected ? Colors.white : Colors.black87,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

/// ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤ (hour/minute) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timeline
class _TimedItem {
  final int? hour; // null = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‚Üí ‡∏î‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢
  final int? minute; // null = ''
  final String title;
  final String detail;
  final String colorHex;

  _TimedItem({
    required this.hour,
    required this.minute,
    required this.title,
    required this.detail,
    required this.colorHex,
  });
}

/// ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö All-day
class _EventPill extends StatelessWidget {
  final String title;
  final String detail;
  final Color color;

  const _EventPill({
    required this.title,
    required this.detail,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 6),
      padding: const EdgeInsets.all(10),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.12),
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: color.withValues(alpha: 0.5)),
      ),
      child: Row(
        children: [
          Container(
            width: 10,
            height: 10,
            decoration: BoxDecoration(color: color, shape: BoxShape.circle),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              '$title ‚Äî $detail',
              style: const TextStyle(fontSize: 13),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }
}

/// ‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå 00‚Äì23 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏õ‡∏∞‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÜ
class _TimelineView extends StatelessWidget {
  final List<_TimedItem> items;

  const _TimelineView({required this.items});

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
      itemCount: 24,
      itemBuilder: (context, i) {
        final hour24 = i;
        final labelHour = hour24 % 12 == 0 ? 12 : hour24 % 12;
        final isAM = hour24 < 12;
        final label =
            '${labelHour.toString().padLeft(2, '0')} ${isAM ? 'AM' : 'PM'}';

        final matches = items.where((e) => e.hour == hour24).toList();

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              label,
              style: const TextStyle(fontSize: 13, color: Colors.black54),
            ),
            const Divider(height: 18, color: Colors.black12),
            ...matches.map((e) => _TimelineCard(item: e)),
            const SizedBox(height: 4),
          ],
        );
      },
    );
  }
}

class _TimelineCard extends StatelessWidget {
  final _TimedItem item;
  const _TimelineCard({required this.item});

  @override
  Widget build(BuildContext context) {
    final color = _safe(item.colorHex);
    final timeText = (item.hour != null && item.minute != null)
        ? '${item.hour!.toString().padLeft(2, '0')}:${item.minute!.toString().padLeft(2, '0')}'
        : '--:--';

    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withValues(alpha: 0.4)),
        boxShadow: const [BoxShadow(color: Colors.black12, blurRadius: 3)],
      ),
      child: Row(
        children: [
          Container(
            width: 10,
            height: 10,
            decoration: BoxDecoration(color: color, shape: BoxShape.circle),
          ),
          const SizedBox(width: 10),
          Expanded(
            child: Text(
              item.title,
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
          ),
          const SizedBox(width: 8),
          Text(timeText, style: const TextStyle(color: Colors.black54)),
        ],
      ),
    );
  }

  Color _safe(String hex) {
    try {
      return Color(int.parse(hex.replaceFirst('#', '0xff')));
    } catch (_) {
      return Colors.grey;
    }
  }
}

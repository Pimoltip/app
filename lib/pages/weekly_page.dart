// Import libraries р╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ
import 'dart:convert'; // р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Ыр╕ер╕З JSON
import 'package:flutter/material.dart'; // Flutter UI framework
import 'package:flutter/services.dart'; // р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣М assets
import '../models/event.dart'; // Model р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б
import '../models/important_day.dart'; // Model р╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н

/// ЁЯУЕ р╕лр╕Щр╣Йр╕▓р╕Хр╕▓р╕гр╕▓р╕Зр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М
///
/// StatelessWidget р╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕Зр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М
/// - р╣Бр╕кр╕Фр╕Зр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕зр╕Ир╕▓р╕Бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
/// - р╣Бр╕кр╕Фр╕Зр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М important_days.json
/// - р╣Бр╕кр╕Фр╕Зр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М ku_calendar.json
/// - р╣Бр╕Ър╣Ир╕Зр╣Бр╕кр╕Фр╕Зр╕Хр╕▓р╕бр╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Юр╕гр╣Йр╕нр╕бр╕кр╕╡р╣Бр╕ер╕░р╣Др╕нр╕Др╕нр╕Щр╕Чр╕╡р╣Ир╣Бр╕Хр╕Бр╕Хр╣Ир╕▓р╕Зр╕Бр╕▒р╕Щ
class WeeklyPage extends StatelessWidget {
  final DateTime selectedDay; // р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕бр╕▓р╣Ар╕Юр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕Зр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Щр╕▒р╣Йр╕Щ
  final List<Event> events; // р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕зр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й

  const WeeklyPage({
    super.key,
    required this.selectedDay, // р╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕Хр╣Йр╕нр╕Зр╕кр╣Ир╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕бр╕▓
    required this.events, // р╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕Хр╣Йр╕нр╕Зр╕кр╣Ир╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕бр╕▓
  });

  /// ЁЯУЕ р╕Др╕│р╕Щр╕зр╕Ур╕зр╕▒р╕Щр╕Чр╕▒р╣Йр╕З 7 р╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М
  ///
  /// р╕гр╕▒р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕бр╕▓р╣Бр╕ер╕░р╕Др╕│р╕Щр╕зр╕Ур╕лр╕▓р╕зр╕▒р╕Щр╕Чр╕▒р╣Йр╕З 7 р╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Щр╕▒р╣Йр╕Щ
  /// р╣Вр╕Фр╕вр╣Ар╕гр╕┤р╣Ир╕бр╕Ир╕▓р╕Бр╕зр╕▒р╕Щр╣Бр╕гр╕Бр╕Вр╕нр╕Зр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М (р╕зр╕▒р╕Щр╕Ир╕▒р╕Щр╕Чр╕гр╣М)
  List<DateTime> getWeekDays(DateTime selectedDay) {
    // р╕лр╕▓р╕зр╕▒р╕Щр╣Бр╕гр╕Бр╕Вр╕нр╕Зр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М (р╕зр╕▒р╕Щр╕Ир╕▒р╕Щр╕Чр╕гр╣М)
    // weekday % 7 р╕Ир╕░р╣Др╕Фр╣Й 1=р╕Ир╕▒р╕Щр╕Чр╕гр╣М, 2=р╕нр╕▒р╕Зр╕Др╕▓р╕г, ..., 6=р╣Ар╕кр╕▓р╕гр╣М, 0=р╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М
    final firstDayOfWeek = selectedDay.subtract(
      Duration(days: selectedDay.weekday % 7),
    );

    // р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕зр╕▒р╕Щр╕Чр╕▒р╣Йр╕З 7 р╕зр╕▒р╕Щ р╣Вр╕Фр╕вр╣Ар╕Юр╕┤р╣Ир╕бр╕Чр╕╡р╕ер╕░р╕зр╕▒р╕Щ
    return List.generate(7, (i) => firstDayOfWeek.add(Duration(days: i)));
  }

  /// ЁЯОи р╕Бр╕│р╕лр╕Щр╕Фр╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М
  ///
  /// р╕гр╕▒р╕Ър╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М (1=р╕Ир╕▒р╕Щр╕Чр╕гр╣М, 7=р╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М)
  /// р╕кр╣Ир╕Зр╕Бр╕ер╕▒р╕Ър╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕Чр╕╡р╣Ир╣Бр╕Хр╕Бр╕Хр╣Ир╕▓р╕Зр╕Бр╕▒р╕Щр╕Хр╕▓р╕бр╕зр╕▒р╕Щ
  Color _getDayColor(int weekday) {
    switch (weekday) {
      case DateTime.sunday: // р╕зр╕▒р╕Щр╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М
        return Colors.red.shade200;
      case DateTime.monday: // р╕зр╕▒р╕Щр╕Ир╕▒р╕Щр╕Чр╕гр╣М
        return Colors.yellow.shade200;
      case DateTime.tuesday: // р╕зр╕▒р╕Щр╕нр╕▒р╕Зр╕Др╕▓р╕г
        return Colors.pink.shade200;
      case DateTime.wednesday: // р╕зр╕▒р╕Щр╕Юр╕╕р╕Ш
        return Colors.green.shade200;
      case DateTime.thursday: // р╕зр╕▒р╕Щр╕Юр╕др╕лр╕▒р╕кр╕Ър╕Фр╕╡
        return Colors.orange.shade200;
      case DateTime.friday: // р╕зр╕▒р╕Щр╕ир╕╕р╕Бр╕гр╣М
        return Colors.blue.shade200;
      case DateTime.saturday: // р╕зр╕▒р╕Щр╣Ар╕кр╕▓р╕гр╣М
        return Colors.purple.shade200;
      default: // р╕Бр╕гр╕Ур╕╡р╕нр╕╖р╣Ир╕Щр╣Ж
        return Colors.grey.shade200;
    }
  }

  /// ЁЯФ╡ р╕Бр╕│р╕лр╕Щр╕Фр╕кр╕╡р╕зр╕Зр╕Бр╕ер╕бр╣Бр╕кр╕Фр╕Зр╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щ
  ///
  /// р╕гр╕▒р╕Ър╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М (1=р╕Ир╕▒р╕Щр╕Чр╕гр╣М, 7=р╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М)
  /// р╕кр╣Ир╕Зр╕Бр╕ер╕▒р╕Ър╕кр╕╡р╣Ар╕Вр╣Йр╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕Зр╕Бр╕ер╕бр╣Бр╕кр╕Фр╕Зр╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щ
  Color _getCircleColor(int weekday) {
    switch (weekday) {
      case DateTime.sunday: // р╕зр╕▒р╕Щр╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М - р╕кр╕╡р╣Бр╕Фр╕Зр╣Ар╕Вр╣Йр╕б
        return Colors.red.shade700;
      case DateTime.monday: // р╕зр╕▒р╕Щр╕Ир╕▒р╕Щр╕Чр╕гр╣М - р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕Зр╣Ар╕Вр╣Йр╕б
        return Colors.yellow.shade700;
      case DateTime.tuesday: // р╕зр╕▒р╕Щр╕нр╕▒р╕Зр╕Др╕▓р╕г - р╕кр╕╡р╕Кр╕бр╕Юр╕╣р╣Ар╕Вр╣Йр╕б
        return Colors.pink.shade400;
      case DateTime.wednesday: // р╕зр╕▒р╕Щр╕Юр╕╕р╕Ш - р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕зр╣Ар╕Вр╣Йр╕б
        return Colors.green.shade600;
      case DateTime.thursday: // р╕зр╕▒р╕Щр╕Юр╕др╕лр╕▒р╕кр╕Ър╕Фр╕╡ - р╕кр╕╡р╕кр╣Йр╕бр╣Ар╕Вр╣Йр╕б
        return Colors.orange.shade700;
      case DateTime.friday: // р╕зр╕▒р╕Щр╕ир╕╕р╕Бр╕гр╣М - р╕кр╕╡р╕Яр╣Йр╕▓р╣Ар╕Вр╣Йр╕б
        return Colors.blue.shade600;
      case DateTime.saturday: // р╕зр╕▒р╕Щр╣Ар╕кр╕▓р╕гр╣М - р╕кр╕╡р╕бр╣Ир╕зр╕Зр╣Ар╕Вр╣Йр╕б
        return Colors.purple.shade600;
      default: // р╕Бр╕гр╕Ур╕╡р╕нр╕╖р╣Ир╕Щр╣Ж - р╕кр╕╡р╣Ар╕Чр╕▓
        return Colors.grey;
    }
  }

  /// ЁЯУЛ р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М JSON
  ///
  /// р╕нр╣Ир╕▓р╕Щр╣Др╕Яр╕ер╣М important_days.json р╕Ир╕▓р╕Б assets
  /// р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е JSON р╣Ар╕Ыр╣Зр╕Щ List р╕Вр╕нр╕З ImportantDay
  /// р╕кр╣Ир╕Зр╕Др╕╖р╕Щ list р╕зр╣Ир╕▓р╕Зр╕Цр╣Йр╕▓р╣Ар╕Бр╕┤р╕Ф error р╣Гр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Ф
  Future<List<ImportantDay>> _loadImportantDays() async {
    try {
      // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М assets/important_days.json
      final impData = await rootBundle.loadString('assets/important_days.json');

      // р╣Бр╕Ыр╕ер╕З JSON string р╣Ар╕Ыр╣Зр╕Щ List
      final impJson = json.decode(impData) as List;

      // р╣Бр╕Ыр╕ер╕Зр╣Бр╕Хр╣Ир╕ер╕░ item р╣Гр╕Щ List р╣Ар╕Ыр╣Зр╕Щ ImportantDay object
      return impJson.map((json) => ImportantDay.fromJson(json)).toList();
    } catch (e) {
      // р╕кр╣Ир╕Зр╕Др╕╖р╕Щ list р╕зр╣Ир╕▓р╕Зр╕Цр╣Йр╕▓р╣Ар╕Бр╕┤р╕Ф error (р╣Др╕Яр╕ер╣Мр╣Др╕бр╣Ир╕Юр╕Ъ р╕лр╕гр╕╖р╕н JSON format р╕Ьр╕┤р╕Ф)
      return [];
    }
  }

  /// ЁЯОУ р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ KU р╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М JSON
  ///
  /// р╕нр╣Ир╕▓р╕Щр╣Др╕Яр╕ер╣М ku_calendar.json р╕Ир╕▓р╕Б assets
  /// р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е JSON р╣Ар╕Ыр╣Зр╕Щ List р╕Вр╕нр╕З ImportantDay
  /// р╕кр╣Ир╕Зр╕Др╕╖р╕Щ list р╕зр╣Ир╕▓р╕Зр╕Цр╣Йр╕▓р╣Ар╕Бр╕┤р╕Ф error р╣Гр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Ф
  Future<List<ImportantDay>> _loadKUCalendar() async {
    try {
      // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М assets/ku_calendar.json
      final kuData = await rootBundle.loadString('assets/ku_calendar.json');

      // р╣Бр╕Ыр╕ер╕З JSON string р╣Ар╕Ыр╣Зр╕Щ List
      final kuJson = json.decode(kuData) as List;

      // р╣Бр╕Ыр╕ер╕Зр╣Бр╕Хр╣Ир╕ер╕░ item р╣Гр╕Щ List р╣Ар╕Ыр╣Зр╕Щ ImportantDay object
      return kuJson.map((json) => ImportantDay.fromJson(json)).toList();
    } catch (e) {
      // р╕кр╣Ир╕Зр╕Др╕╖р╕Щ list р╕зр╣Ир╕▓р╕Зр╕Цр╣Йр╕▓р╣Ар╕Бр╕┤р╕Ф error (р╣Др╕Яр╕ер╣Мр╣Др╕бр╣Ир╕Юр╕Ъ р╕лр╕гр╕╖р╕н JSON format р╕Ьр╕┤р╕Ф)
      return [];
    }
  }

  /// ЁЯУЕ р╣Бр╕Ыр╕ер╕З string р╣Ар╕Ыр╣Зр╕Щ DateTime
  ///
  /// р╕гр╕▒р╕Ъ string р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ "YYYY-MM-DD"
  /// р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щ DateTime object
  /// р╕кр╣Ир╕Зр╕Др╕╖р╕Щ null р╕Цр╣Йр╕▓ string format р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
  DateTime? _stringToDate(String dateStr) {
    try {
      // р╣Гр╕Кр╣Й DateTime.parse() р╣Бр╕Ыр╕ер╕З string р╣Ар╕Ыр╣Зр╕Щ DateTime
      return DateTime.parse(dateStr);
    } catch (e) {
      // р╕кр╣Ир╕Зр╕Др╕╖р╕Щ null р╕Цр╣Йр╕▓ format р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
      return null;
    }
  }

  /// ЁЯПЧя╕П р╕кр╕гр╣Йр╕▓р╕З UI р╕Вр╕нр╕Зр╕лр╕Щр╣Йр╕▓р╕Хр╕▓р╕гр╕▓р╕Зр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М
  @override
  Widget build(BuildContext context) {
    // р╕Др╕│р╕Щр╕зр╕Ур╕зр╕▒р╕Щр╕Чр╕▒р╣Йр╕З 7 р╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М
    final weekDays = getWeekDays(selectedDay);

    return Scaffold(
      // ЁЯУ▒ AppBar р╣Бр╕кр╕Фр╕Зр╕Кр╕╖р╣Ир╕нр╕лр╕Щр╣Йр╕▓р╣Бр╕ер╕░р╕Ыр╕╕р╣Ир╕бр╕Бр╕ер╕▒р╕Ъ
      appBar: AppBar(
        title: Text(
          "р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Вр╕нр╕З ${selectedDay.day}/${selectedDay.month}/${selectedDay.year}",
        ),
        backgroundColor: Colors.green.shade200, // р╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╣Ар╕Вр╕╡р╕вр╕зр╕нр╣Ир╕нр╕Щ
        leading: IconButton(
          icon: const Icon(Icons.arrow_back), // р╣Др╕нр╕Др╕нр╕Щр╕ер╕╣р╕Бр╕ир╕гр╕Бр╕ер╕▒р╕Ъ
          onPressed: () => Navigator.pop(context), // р╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕лр╕Щр╣Йр╕▓р╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓
        ),
      ),
      // ЁЯУЛ р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕лр╕ер╕▒р╕Бр╕Вр╕нр╕Зр╕лр╕Щр╣Йр╕▓
      body: FutureBuilder<List<List<ImportantDay>>>(
        // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М JSON р╕Чр╕▒р╣Йр╕З 2 р╣Др╕Яр╕ер╣Мр╕Юр╕гр╣Йр╕нр╕бр╕Бр╕▒р╕Щ
        future: Future.wait([_loadImportantDays(), _loadKUCalendar()]),
        builder: (context, snapshot) {
          // р╣Бр╕кр╕Фр╕З loading indicator р╕Вр╕Ур╕░р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          // р╣Бр╕вр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Вр╕лр╕ер╕Фр╕бр╕▓р╣Др╕Фр╣Й
          final importantDays = snapshot.data?[0] ?? []; // р╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
          final kuCalendar = snapshot.data?[1] ?? []; // р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ KU

          // ЁЯУЬ SingleChildScrollView р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Ир╕▓р╕Бр╕Вр╕нр╕Ъ 16 pixels
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start, // р╕Ир╕▒р╕Фр╕Кр╕┤р╕Фр╕Лр╣Йр╕▓р╕в
              children: [
                // ЁЯУЭ р╕лр╕▒р╕зр╕Вр╣Йр╕нр╕лр╕ер╕▒р╕Бр╕Вр╕нр╕Зр╕лр╕Щр╣Йр╕▓
                const Text(
                  "Weekly Tasks & Events",
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 16 pixels
                // ЁЯФД р╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕▓р╕гр╣Мр╕Фр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М
                ...weekDays.map((day) {
                  // ЁЯУЛ р╕Бр╕гр╕нр╕Зр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕зр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣И
                  final dayEvents = events
                      .where(
                        (e) =>
                            e.date.year == day.year &&
                            e.date.month == day.month &&
                            e.date.day == day.day,
                      )
                      .toList();

                  // тнР р╕лр╕▓р╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣И
                  final dayImportantDays = importantDays.where((imp) {
                    final impDate = _stringToDate(
                      imp.date,
                    ); // р╣Бр╕Ыр╕ер╕З string р╣Ар╕Ыр╣Зр╕Щ DateTime
                    return impDate != null &&
                        impDate.year == day.year && // р╕Ыр╕╡р╕Хр╕гр╕Зр╕Бр╕▒р╕Щ
                        impDate.month == day.month && // р╣Ар╕Фр╕╖р╕нр╕Щр╕Хр╕гр╕Зр╕Бр╕▒р╕Щ
                        impDate.day == day.day; // р╕зр╕▒р╕Щр╕Хр╕гр╕Зр╕Бр╕▒р╕Щ
                  }).toList();

                  // ЁЯОУ р╕лр╕▓р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ KU р╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣И
                  final dayKUCalendar = kuCalendar.where((ku) {
                    final kuDate = _stringToDate(
                      ku.date,
                    ); // р╣Бр╕Ыр╕ер╕З string р╣Ар╕Ыр╣Зр╕Щ DateTime
                    return kuDate != null &&
                        kuDate.year == day.year && // р╕Ыр╕╡р╕Хр╕гр╕Зр╕Бр╕▒р╕Щ
                        kuDate.month == day.month && // р╣Ар╕Фр╕╖р╕нр╕Щр╕Хр╕гр╕Зр╕Бр╕▒р╕Щ
                        kuDate.day == day.day; // р╕зр╕▒р╕Щр╕Хр╕гр╕Зр╕Бр╕▒р╕Щ
                  }).toList();

                  // ЁЯУж Container р╕Бр╕▓р╕гр╣Мр╕Фр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕зр╕▒р╕Щ
                  return Container(
                    margin: const EdgeInsets.only(
                      bottom: 16,
                    ), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Фр╣Йр╕▓р╕Щр╕ер╣Ир╕▓р╕З 16 pixels
                    padding: const EdgeInsets.all(
                      16,
                    ), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕ар╕▓р╕вр╣Гр╕Щ 16 pixels
                    decoration: BoxDecoration(
                      color: _getDayColor(day.weekday), // р╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕Хр╕▓р╕бр╕зр╕▒р╕Щ
                      borderRadius: BorderRadius.circular(
                        12,
                      ), // р╕бр╕╕р╕бр╣Вр╕Др╣Йр╕Зр╕бр╕Щ 12 pixels
                      border: Border.all(
                        // р╕Цр╣Йр╕▓р╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Юр╕┤р╣Ар╕ир╕й р╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Вр╕нр╕Ър╕кр╕╡р╕кр╣Йр╕б
                        color:
                            dayImportantDays.isNotEmpty ||
                                dayKUCalendar.isNotEmpty
                            ? Colors.orange.shade300
                            : Colors.transparent,
                        width: 2, // р╕Др╕зр╕▓р╕бр╕лр╕Щр╕▓р╕Вр╕нр╕Зр╕Вр╕нр╕Ъ 2 pixels
                      ),
                    ),
                    child: Column(
                      crossAxisAlignment:
                          CrossAxisAlignment.start, // р╕Ир╕▒р╕Фр╕Кр╕┤р╕Фр╕Лр╣Йр╕▓р╕в
                      children: [
                        // ЁЯЧУя╕П р╕кр╣Ир╕зр╕Щр╕лр╕▒р╕зр╕Вр╕нр╕Зр╕зр╕▒р╕Щ (р╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щ, р╕Кр╕╖р╣Ир╕нр╕зр╕▒р╕Щ, р╣Др╕нр╕Др╕нр╕Щр╕Юр╕┤р╣Ар╕ир╕й)
                        Row(
                          children: [
                            // ЁЯФ╡ р╕зр╕Зр╕Бр╕ер╕бр╣Бр╕кр╕Фр╕Зр╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щ
                            CircleAvatar(
                              radius: 20, // р╕гр╕▒р╕ир╕бр╕╡ 20 pixels
                              backgroundColor: _getCircleColor(
                                day.weekday,
                              ), // р╕кр╕╡р╕Хр╕▓р╕бр╕зр╕▒р╕Щ
                              child: Text(
                                "${day.day}", // р╣Бр╕кр╕Фр╕Зр╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щ
                                style: const TextStyle(
                                  fontWeight: FontWeight.bold, // р╕Хр╕▒р╕зр╕лр╕Щр╕▓
                                  color: Colors.white, // р╕кр╕╡р╕Вр╕▓р╕з
                                ),
                              ),
                            ),
                            const SizedBox(width: 12), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 12 pixels
                            // ЁЯУЭ р╕Кр╕╖р╣Ир╕нр╕зр╕▒р╕Щ
                            Text(
                              _weekdayName(day.weekday),
                              style: const TextStyle(
                                fontWeight: FontWeight.bold, // р╕Хр╕▒р╕зр╕лр╕Щр╕▓
                                fontSize: 18, // р╕Вр╕Щр╕▓р╕Фр╕Яр╕нр╕Щр╕Хр╣М 18
                              ),
                            ),
                            // тнР р╣Др╕нр╕Др╕нр╕Щр╕Фр╕▓р╕зр╕Цр╣Йр╕▓р╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Юр╕┤р╣Ар╕ир╕й
                            if (dayImportantDays.isNotEmpty ||
                                dayKUCalendar.isNotEmpty)
                              const Icon(
                                Icons.star,
                                color: Colors.orange,
                                size: 20,
                              ),
                          ],
                        ),
                        const SizedBox(height: 8), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 8 pixels
                        // ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕зр╕Ир╕▓р╕Бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
                        if (dayEvents.isNotEmpty) ...[
                          const Text(
                            "ЁЯУЛ Personal Tasks:",
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 14,
                            ),
                          ),
                          // р╣Бр╕кр╕Фр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕з
                          ...dayEvents.map(
                            (ev) => Padding(
                              padding: const EdgeInsets.only(
                                left: 8,
                                top: 4,
                              ), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Лр╣Йр╕▓р╕в 8, р╕Ър╕Щ 4
                              child: Row(
                                children: [
                                  // тЬЕ р╣Др╕нр╕Др╕нр╕Щр╕Зр╕▓р╕Щ
                                  const Icon(
                                    Icons.task_alt,
                                    size: 16, // р╕Вр╕Щр╕▓р╕Ф 16 pixels
                                    color: Colors.blue, // р╕кр╕╡р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щ
                                  ),
                                  const SizedBox(width: 8), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 8 pixels
                                  // ЁЯУЭ р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б
                                  Expanded(
                                    child: Text(
                                      "${ev.title} - ${ev.description}",
                                      style: const TextStyle(fontSize: 14),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(height: 8), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 8 pixels
                        ],

                        // тнР р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
                        if (dayImportantDays.isNotEmpty) ...[
                          const Text(
                            "тнР Important Days:",
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 14,
                              color: Colors.red, // р╕кр╕╡р╣Бр╕Фр╕З
                            ),
                          ),
                          // р╣Бр╕кр╕Фр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
                          ...dayImportantDays.map(
                            (imp) => Padding(
                              padding: const EdgeInsets.only(
                                left: 8,
                                top: 4,
                              ), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Лр╣Йр╕▓р╕в 8, р╕Ър╕Щ 4
                              child: Row(
                                children: [
                                  // ЁЯФ┤ р╕зр╕Зр╕Бр╕ер╕бр╕кр╕╡р╕Хр╕▓р╕бр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Фр╣Гр╕Щ JSON
                                  Container(
                                    width: 12, // р╕Бр╕зр╣Йр╕▓р╕З 12 pixels
                                    height: 12, // р╕кр╕╣р╕З 12 pixels
                                    decoration: BoxDecoration(
                                      color: Color(
                                        // р╣Бр╕Ыр╕ер╕Зр╕кр╕╡р╕Ир╕▓р╕Б "#RRGGBB" р╣Ар╕Ыр╣Зр╕Щ Color object
                                        int.parse(
                                          imp.color.replaceFirst('#', '0xff'),
                                        ),
                                      ),
                                      shape: BoxShape.circle, // р╕гр╕╣р╕Ыр╕зр╕Зр╕Бр╕ер╕б
                                    ),
                                  ),
                                  const SizedBox(width: 8), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 8 pixels
                                  // ЁЯУЭ р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment
                                          .start, // р╕Ир╕▒р╕Фр╕Кр╕┤р╕Фр╕Лр╣Йр╕▓р╕в
                                      children: [
                                        // ЁЯУМ р╕Кр╕╖р╣Ир╕нр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
                                        Text(
                                          imp.title,
                                          style: const TextStyle(
                                            fontWeight:
                                                FontWeight.bold, // р╕Хр╕▒р╕зр╕лр╕Щр╕▓
                                            fontSize: 14,
                                          ),
                                        ),
                                        // ЁЯУД р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
                                        Text(
                                          imp.description,
                                          style: const TextStyle(
                                            fontSize: 12,
                                            color: Colors.grey, // р╕кр╕╡р╣Ар╕Чр╕▓
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(height: 8), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 8 pixels
                        ],

                        // ЁЯОУ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ KU
                        if (dayKUCalendar.isNotEmpty) ...[
                          const Text(
                            "ЁЯОУ KU Calendar:",
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 14,
                              color: Colors.green, // р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕з
                            ),
                          ),
                          // р╣Бр╕кр╕Фр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Ир╕▓р╕Бр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ KU
                          ...dayKUCalendar.map(
                            (ku) => Padding(
                              padding: const EdgeInsets.only(
                                left: 8,
                                top: 4,
                              ), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Лр╣Йр╕▓р╕в 8, р╕Ър╕Щ 4
                              child: Row(
                                children: [
                                  // ЁЯЯв р╕зр╕Зр╕Бр╕ер╕бр╕кр╕╡р╕Хр╕▓р╕бр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Фр╣Гр╕Щ JSON
                                  Container(
                                    width: 12, // р╕Бр╕зр╣Йр╕▓р╕З 12 pixels
                                    height: 12, // р╕кр╕╣р╕З 12 pixels
                                    decoration: BoxDecoration(
                                      color: Color(
                                        // р╣Бр╕Ыр╕ер╕Зр╕кр╕╡р╕Ир╕▓р╕Б "#RRGGBB" р╣Ар╕Ыр╣Зр╕Щ Color object
                                        int.parse(
                                          ku.color.replaceFirst('#', '0xff'),
                                        ),
                                      ),
                                      shape: BoxShape.circle, // р╕гр╕╣р╕Ыр╕зр╕Зр╕Бр╕ер╕б
                                    ),
                                  ),
                                  const SizedBox(width: 8), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 8 pixels
                                  // ЁЯУЭ р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ KU
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment
                                          .start, // р╕Ир╕▒р╕Фр╕Кр╕┤р╕Фр╕Лр╣Йр╕▓р╕в
                                      children: [
                                        // ЁЯУМ р╕Кр╕╖р╣Ир╕нр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б KU
                                        Text(
                                          ku.title,
                                          style: const TextStyle(
                                            fontWeight:
                                                FontWeight.bold, // р╕Хр╕▒р╕зр╕лр╕Щр╕▓
                                            fontSize: 14,
                                          ),
                                        ),
                                        // ЁЯУД р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б KU
                                        Text(
                                          ku.description,
                                          style: const TextStyle(
                                            fontSize: 12,
                                            color: Colors.grey, // р╕кр╕╡р╣Ар╕Чр╕▓
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],

                        // ЁЯУн р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Ар╕бр╕╖р╣Ир╕нр╣Др╕бр╣Ир╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╣Гр╕Фр╣Ж
                        if (dayEvents.isEmpty &&
                            dayImportantDays.isEmpty &&
                            dayKUCalendar.isEmpty)
                          const Padding(
                            padding: EdgeInsets.only(
                              left: 8,
                              top: 4,
                            ), // р╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Лр╣Йр╕▓р╕в 8, р╕Ър╕Щ 4
                            child: Text(
                              "р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╣Гр╕Щр╕зр╕▒р╕Щр╕Щр╕╡р╣Й",
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey, // р╕кр╕╡р╣Ар╕Чр╕▓
                                fontStyle: FontStyle.italic, // р╕Хр╕▒р╕зр╣Ар╕нр╕╡р╕вр╕З
                              ),
                            ),
                          ),
                      ],
                    ),
                  );
                }),
              ],
            ),
          );
        },
      ),
    );
  }

  /// ЁЯУЕ р╣Бр╕Ыр╕ер╕Зр╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щр╣Ар╕Ыр╣Зр╕Щр╕Кр╕╖р╣Ир╕нр╕зр╕▒р╕Щр╣Ар╕Ыр╣Зр╕Щр╕ар╕▓р╕йр╕▓р╕нр╕▒р╕Зр╕Бр╕др╕й
  ///
  /// р╕гр╕▒р╕Ър╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕зр╕▒р╕Щр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М (1=р╕Ир╕▒р╕Щр╕Чр╕гр╣М, 7=р╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М)
  /// р╕кр╣Ир╕Зр╕Бр╕ер╕▒р╕Ър╕Кр╕╖р╣Ир╕нр╕зр╕▒р╕Щр╣Ар╕Ыр╣Зр╕Щр╕ар╕▓р╕йр╕▓р╕нр╕▒р╕Зр╕Бр╕др╕йр╕Хр╕▒р╕зр╕Юр╕┤р╕бр╕Юр╣Мр╣Гр╕лр╕Нр╣И
  String _weekdayName(int weekday) {
    switch (weekday) {
      case DateTime.sunday: // р╕зр╕▒р╕Щр╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М (0)
        return "SUNDAY";
      case DateTime.monday: // р╕зр╕▒р╕Щр╕Ир╕▒р╕Щр╕Чр╕гр╣М (1)
        return "MONDAY";
      case DateTime.tuesday: // р╕зр╕▒р╕Щр╕нр╕▒р╕Зр╕Др╕▓р╕г (2)
        return "TUESDAY";
      case DateTime.wednesday: // р╕зр╕▒р╕Щр╕Юр╕╕р╕Ш (3)
        return "WEDNESDAY";
      case DateTime.thursday: // р╕зр╕▒р╕Щр╕Юр╕др╕лр╕▒р╕кр╕Ър╕Фр╕╡ (4)
        return "THURSDAY";
      case DateTime.friday: // р╕зр╕▒р╕Щр╕ир╕╕р╕Бр╕гр╣М (5)
        return "FRIDAY";
      case DateTime.saturday: // р╕зр╕▒р╕Щр╣Ар╕кр╕▓р╕гр╣М (6)
        return "SATURDAY";
      default: // р╕Бр╕гр╕Ур╕╡р╕нр╕╖р╣Ир╕Щр╣Ж
        return "";
    }
  }
}

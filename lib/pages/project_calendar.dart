// ЁЯУж Import libraries р╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ
import 'dart:convert'; // р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Ыр╕ер╕З JSON data
import 'package:flutter/material.dart'; // Flutter UI framework р╕лр╕ер╕▒р╕Б
import 'package:flutter/services.dart'; // р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З assets files
import 'package:table_calendar/table_calendar.dart'; // Library р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ
import 'appoinment_page.dart'; // р╕лр╕Щр╣Йр╕▓р╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕вр╕гр╕▓р╕вр╕зр╕▒р╕Щ
import 'dashboard_page.dart'; // р╕лр╕Щр╣Йр╕▓р╣Бр╕Фр╕Кр╕Ър╕нр╕гр╣Мр╕Фр╕лр╕ер╕▒р╕Б
import '../models/important_day.dart'; // Model р╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
import '../models/event.dart'; // Model р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б
import '../models/project.dart'; // Model р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
import '../models/user.dart'; // Model р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
import '../repo/event_repository.dart'; // Repository р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б
import '../repo/project_repository.dart'; // Repository р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
import '../repo/user_repository.dart'; // Repository р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
import '../services/auth_service.dart'; // Service р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ

/// =======================
/// ЁЯУЛ PROJECT CARD WIDGET - р╕Бр╕▓р╕гр╣Мр╕Фр╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
/// =======================
/// 
/// Widget р╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕гр╕╕р╕Ыр╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М р╕Юр╕гр╣Йр╕нр╕бр╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Хр╣Ир╕▓р╕Зр╣Ж:
/// 1. р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М (countdown, progress)
/// 2. р╕Др╕│р╕Щр╕зр╕Ур╣Ар╕Ыр╕нр╕гр╣Мр╣Ар╕Лр╣Зр╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓р╕гр╕зр╕б
/// 3. р╣Бр╕кр╕Фр╕Зр╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╣Ар╕лр╕ер╕╖р╕нр╣Гр╕Щ countdown
/// 4. р╕гр╕нр╕Зр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В progress р╕Ьр╣Ир╕▓р╕Щ dialog
/// 5. р╕Ыр╕╕р╣Ир╕бр╕Щр╕│р╕Чр╕▓р╕Зр╣Др╕Ыр╕вр╕▒р╕Зр╕лр╕Щр╣Йр╕▓р╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕в
/// 
/// р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕лр╕ер╕▒р╕Б:
/// - InfoBox р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤
/// - Progress Dialog р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Бр╣Йр╣Др╕Вр╕кр╕Цр╕▓р╕Щр╕░
/// - Countdown Calculation р╕кр╕│р╕лр╕гр╕▒р╕Ъ deadline
/// - Navigation р╣Др╕Ыр╕вр╕▒р╕З Appointment Page
class ProjectCard extends StatelessWidget {
  /// Callback function р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Бр╣Ар╕бр╕╖р╣Ир╕нр╣Бр╕Хр╕░р╕Ыр╕╕р╣Ир╕б Appointment
  final VoidCallback onTapAppointment;
  
  /// р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕Ир╕░р╣Бр╕кр╕Фр╕Зр╣Гр╕Щ card
  final List<Project> projects;
  
  /// Callback function р╕кр╕│р╕лр╕гр╕▒р╕Ър╕нр╕▒р╕Юр╣Ар╕Фр╕Ч progress р╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
  final Function(Project, int)? onProgressUpdate;

  const ProjectCard({
    super.key,
    required this.onTapAppointment,
    required this.projects,
    this.onProgressUpdate,
  });
// ЁЯУЛ ProjectCard ------------------------------
  @override
  Widget build(BuildContext context) { 
    // ========================================
    //ЁЯУК р╕кр╣Ир╕зр╕Щр╕Чр╕╡р╣И 1: р╕Бр╕▓р╕гр╕Др╕│р╕Щр╕зр╕Ур╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤р╕Ир╕▓р╕Бр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
    // ========================================
    
    final totalProjects = projects.length; //р╣Ар╕Ыр╣Зр╕Щр╕Бр╕▓р╕гр╕Щр╕▒р╕Ър╕Ир╕│р╕Щр╕зр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щр╕ер╕┤р╕кр╕Хр╣М projects
    // р╕Щр╕▒р╕Ър╕Ир╕│р╕Щр╕зр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г (progress р╕гр╕░р╕лр╕зр╣Ир╕▓р╕З 1-99%)
    final inProgressProjects = projects
        .where((p) => p.progress > 0 && p.progress < 100) //р╣Ар╕бр╕Шр╕нр╕Ф .where() р╣Ар╕Юр╕╖р╣Ир╕нр╕Бр╕гр╕нр╕З (Filter) р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕бр╕╡р╕Др╣Ир╕▓р╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓ (p.progress) р╕нр╕вр╕╣р╣Ир╕гр╕░р╕лр╕зр╣Ир╕▓р╕З 1 р╕Цр╕╢р╕З 99 р╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ
        .length; 

    // р╕Др╕│р╕Щр╕зр╕Ур╣Ар╕Ыр╕нр╕гр╣Мр╣Ар╕Лр╣Зр╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕в
    double averageProgress = 0;
    if (inProgressProjects > 0) { //р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г
      final progressSum = projects
          .where((p) => p.progress > 0 && p.progress < 100)
          .fold(0, (sum, p) => sum + p.progress); //р╣Ар╕бр╕Шр╕нр╕Ф .fold() р╣Ар╕Юр╕╖р╣Ир╕нр╕гр╕зр╕б (Sum) р╕Др╣Ир╕▓ Progress р╕Вр╕нр╕Зр╕Чр╕╕р╕Бр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г
      averageProgress = progressSum / inProgressProjects;
    }

    // тП│ р╕Др╕│р╕Щр╕зр╕У (Countdown) (р╕Ир╕│р╕Щр╕зр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕бр╕╡ deadline р╣Бр╕ер╕░р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Др╕гр╕Ър╕Бр╕│р╕лр╕Щр╕Ф)
    int countdownProjects = 0;
    int totalDaysLeft = 0;
    final now = DateTime.now();

    // р╕зр╕Щр╕ер╕╣р╕Ыр╕Ьр╣Ир╕▓р╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Ар╕Юр╕╖р╣Ир╕нр╕Др╕│р╕Щр╕зр╕У countdown
    for (final project in projects) {
      if (project.deadline != null) { //р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Щр╕╡р╣Йр╕бр╕╡р╕Бр╕▓р╕гр╕Бр╕│р╕лр╕Щр╕Фр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
        try {
          final deadlineDate = DateTime.parse(project.deadline!); //р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕зр╕▒р╕Щр╕Чр╕╡р╣И (String) р╕Вр╕нр╕З Deadline р╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕зр╕▒р╕Хр╕Цр╕╕р╕зр╕▒р╕Щр╕Чр╕╡р╣И (DateTime) р╣Ар╕Юр╕╖р╣Ир╕нр╕Щр╕│р╕бр╕▓р╕Др╕│р╕Щр╕зр╕У
          final difference = deadlineDate.difference(now).inDays; // р╕Др╕│р╕Щр╕зр╕У р╕Др╕зр╕▓р╕бр╣Бр╕Хр╕Бр╕Хр╣Ир╕▓р╕З р╕гр╕░р╕лр╕зр╣Ир╕▓р╕З Deadline р╕Бр╕▒р╕Ър╣Ар╕зр╕ер╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ (now) р╣Бр╕ер╣Йр╕зр╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╣Ар╕Ыр╣Зр╕Щр╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щ (inDays)
          if (difference >= 0) { //р╕Цр╣Йр╕▓р╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╣Ар╕лр╕ер╕╖р╕нр╣Ар╕Ыр╣Зр╕Щ 0 р╕зр╕▒р╕Щр╕Вр╕╢р╣Йр╕Щр╣Др╕Ы 
            countdownProjects++; //р╕Щр╕▒р╕Ър╣Ар╕Юр╕┤р╣Ир╕бр╣Гр╕Щ countdownProjects
            totalDaysLeft += difference; //р╕Щр╕│р╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╣Др╕Ыр╕гр╕зр╕бр╣Гр╕Щ totalDaysLeft
          }
        } catch (e) {
          // р╕лр╕▓р╕Бр╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Ц parse р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Др╕Фр╣Й р╣Гр╕лр╣Йр╕Щр╕▒р╕Ър╣Ар╕Ыр╣Зр╕Щ countdown project
          countdownProjects++;
        }
      }
    }//----------------р╕Ир╕Ър╕кр╣Ир╕зр╕Щр╕Бр╕▓р╕гр╕Др╕│р╕Щр╕зр╕Ур╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤р╕Ир╕▓р╕Бр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М----------
    ///р╣Ар╕бр╕╖р╣Ир╕нр╕Др╕│р╕Щр╕зр╕Ур╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤р╣Ар╕кр╕гр╣Зр╕И(р╕Хр╕▒р╕зр╣Бр╕Ыр╕г totalProjects, averageProgress, totalDaysLeft р╕Цр╕╣р╕Бр╕Бр╕│р╕лр╕Щр╕Фр╕Др╣Ир╕▓р╣Бр╕ер╣Йр╕з) 

    // ========================================
    // ЁЯОи р╕кр╕гр╣Йр╕▓р╕З UI р╕Вр╕нр╕З ProjectCard
    // ========================================
    //ЁЯЦ╝я╕П р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕нр╕нр╕Бр╣Бр╕Ър╕Ър╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ 
    return Container( // р╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╣Ир╕нр╕Зр╕лр╕ер╕▒р╕Бр╕Чр╕╡р╣Ир╕Ър╕гр╕гр╕Ир╕╕р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Вр╕нр╕З Card
      padding: const EdgeInsets.all(16), // р╣Ар╕зр╣Йр╕Щр╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Фр╣Йр╕▓р╕Щр╣Гр╕Щр╕Бр╕ер╣Ир╕нр╕З 16 р╕лр╕Щр╣Ир╕зр╕вр╕гр╕нр╕Ър╕Чр╕┤р╕ир╕Чр╕▓р╕З
      decoration: BoxDecoration( //р╕Бр╕│р╕лр╕Щр╕Фр╕кр╣Др╕Хр╕ер╣Мр╣Гр╕лр╣Йр╕Бр╕▒р╕Ър╕Бр╕ер╣Ир╕нр╕З:
        color: Colors.amber.shade50, // р╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕Зр╕нр╣Ир╕нр╕Щ
        borderRadius: BorderRadius.circular(12), //р╕бр╕╕р╕бр╕Вр╕нр╕Зр╕Бр╕ер╣Ир╕нр╕Зр╕бр╕╡р╕Др╕зр╕▓р╕бр╣Вр╕Др╣Йр╕Зр╕бр╕Щ 12 р╕лр╕Щр╣Ир╕зр╕в
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ЁЯУЭ р╣Бр╕кр╕Фр╕Зр╕Кр╕╖р╣Ир╕нр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М (р╣Гр╕Кр╣Йр╕Кр╕╖р╣Ир╕нр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╣Бр╕гр╕Б р╕лр╕гр╕╖р╕н "Sample Project")
          Text( // р╣Бр╕кр╕Фр╕Зр╕Кр╕╖р╣Ир╕нр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
            totalProjects > 0 ? projects.first.name : 'Sample Project',
            //р╕лр╕▓р╕Бр╕бр╕╡р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╣Гр╕Щр╕гр╕▓р╕вр╕Бр╕▓р╕г(totalProjects > 0)р╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Кр╕╖р╣Ир╕нр╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╣Бр╕гр╕Бр╕кр╕╕р╕Ф (projects.first.name) р╣Бр╕Хр╣Ир╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╣Ар╕ер╕в р╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕зр╣Ир╕▓ 'Sample Project' р╣Бр╕Чр╕Щ
            style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold), //р╕бр╕╡р╕Вр╕Щр╕▓р╕Фр╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕гр╣Ар╕Чр╣Ир╕▓р╕Бр╕▒р╕Ъ 15 р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╕лр╕Щр╕▓
          ),
          const SizedBox(height: 5), // р╣Гр╕Кр╣Йр╣Ар╕зр╣Йр╕Щр╕Кр╣Ир╕нр╕Зр╕зр╣Ир╕▓р╕Зр╣Бр╕Щр╕зр╕Хр╕▒р╣Йр╕З 5 р╕лр╕Щр╣Ир╕зр╕вр╕лр╕ер╕▒р╕Зр╕Кр╕╖р╣Ир╕нр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
          
          // ЁЯУК р╣Бр╕Цр╕зр╣Бр╕кр╕Фр╕З InfoBox р╕Хр╣Ир╕▓р╕Зр╣Ж
          Row( //р╣Гр╕Кр╣Йр╕Ир╕▒р╕Фр╣Ар╕гр╕╡р╕вр╕З Widget р╕вр╣Ир╕нр╕в р╣Ж р╣Гр╕лр╣Йр╕нр╕вр╕╣р╣Ир╣Гр╕Щ р╣Бр╕Щр╕зр╕Щр╕нр╕Щ
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,//р╕Бр╕гр╕░р╕Ир╕▓р╕вр╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕зр╣Ир╕▓р╕Зр╕гр╕нр╕Ъ р╣Ж InfoBox р╕Чр╕▒р╣Йр╕Зр╕кр╕нр╕Зр╕Бр╕ер╣Ир╕нр╕Зр╣Гр╕лр╣Йр╣Ар╕Чр╣Ир╕▓р╕Бр╕▒р╕Щ
            children: [
              // ЁЯУЕ InfoBox р╣Бр╕кр╕Фр╕Зр╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щ countdown
              _buildInfoBox( //р╣Ар╕Ыр╣Зр╕Щ Helper Function (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕в) р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕ер╣Ир╕нр╕Зр╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕┤р╕Хр╕┤р╕Чр╕╡р╣Ир╕бр╕╡р╣Др╕нр╕Др╕нр╕Щ, р╕Кр╕╖р╣Ир╕н, р╣Бр╕ер╕░р╕Др╣Ир╕▓
                // Countdowns
                icon: Icons.calendar_today,//р╣Бр╕кр╕Фр╕Зр╣Др╕нр╕Др╕нр╕Щр╕гр╕╣р╕Ыр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ (ЁЯУЕ)
                title: 'Countdowns', //р╕Кр╕╖р╣Ир╕нр╕лр╕▒р╕зр╕Вр╣Йр╕нр╕Вр╕нр╕Зр╕Бр╕ер╣Ир╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
                value: countdownProjects > 0 ? '$totalDaysLeft' : '0', //р╣Бр╕кр╕Фр╕Зр╕Др╣Ир╕▓ $totalDaysLeft (р╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╣Ар╕лр╕ер╕╖р╕нр╕гр╕зр╕бр╕Чр╕╡р╣Ир╕Др╕│р╕Щр╕зр╕Ур╣Др╕зр╣Й)
              ),
              
              // тП│ InfoBox р╣Бр╕кр╕Фр╕Зр╣Ар╕Ыр╕нр╕гр╣Мр╣Ар╕Лр╣Зр╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓ (р╕Бр╕Фр╣Др╕Фр╣Й)
              GestureDetector( //р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Хр╣Ир╕нр╕Бр╕▓р╕гр╕кр╕▒р╕бр╕Ьр╕▒р╕к/р╕Др╕ер╕┤р╕Бр╣Др╕Фр╣Й
                onTap: () => _showProgressDialog(context), //р╣Ар╕бр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕Хр╕░р╕Чр╕╡р╣Ир╕Бр╕ер╣Ир╕нр╕Зр╕Щр╕╡р╣Й р╕Ир╕░р╣Ар╕гр╕╡р╕вр╕Бр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ 
                child: _buildInfoBox(
                  icon: Icons.hourglass_bottom, //р╣Бр╕кр╕Фр╕Зр╣Др╕нр╕Др╕нр╕Щр╕гр╕╣р╕Ыр╕Щр╕▓р╕мр╕┤р╕Бр╕▓р╕Чр╕гр╕▓р╕в тП│
                  title: 'In-Progress',
                  value: inProgressProjects > 0
                      ? '${averageProgress.round()}%'
                      : '0%',
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          // ЁЯУЕ р╕кр╣Ир╕зр╕Щр╕Ыр╕╕р╣Ир╕б Appointment
          const Text(
            'Appointment',
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 20),
          
          // ЁЯЯв р╕Ыр╕╕р╣Ир╕бр╣Ар╕Ыр╕┤р╕Фр╕лр╕Щр╣Йр╕▓р╕Щр╕▒р╕Фр╕лр╕бр╕▓р╕в
          GestureDetector( //р╣Гр╕Кр╣Йр╕лр╣Ир╕н Container р╕Чр╕╡р╣Ир╕Чр╕│р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Ыр╕╕р╣Ир╕б
            onTap: onTapAppointment, // р╣Ар╕бр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Бр╕Фр╕Ыр╕╕р╣Ир╕бр╕Щр╕╡р╣Й р╕Ир╕░р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й Callback Function р╕Чр╕╡р╣И Widget р╣Бр╕бр╣И (ProjectCalendar) р╕кр╣Ир╕Зр╕бр╕▓ р╕Лр╕╢р╣Ир╕Зр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕▒р╣Йр╕Щр╕Ир╕░р╕Чр╕│р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Щр╕│р╕Чр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Др╕Ыр╕вр╕▒р╕Зр╕лр╕Щр╣Йр╕▓ AppointmentPage
            child: Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green,
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Text('Open', style: TextStyle(color: Colors.white)),
            ),
          ),
        ],
      ),
    );
  }//------------------------------р╕Ир╕Ър╕кр╣Ир╕зр╕Щ ui  ProjectCard --------------------------------------------------

  // ========================================
  // ЁЯЫая╕П Helper Methods - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н
  // ========================================
  /// р╣Бр╕кр╕Фр╕З Dialog р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Бр╣Йр╣Др╕В Progress р╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
  /// @param context BuildContext р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕З dialog

  //р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ _showProgressDialog ЁЯЫая╕П
  Future<void> _showProgressDialog(BuildContext context) async {
    if (projects.isEmpty) return; //р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╣Ир╕нр╕Щр╕зр╣Ир╕▓р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╣Ар╕ер╕в (projects.isEmpty) р╣Гр╕лр╣Йр╕лр╕вр╕╕р╕Фр╕Чр╕│р╕Зр╕▓р╕Щр╕Чр╕▒р╕Щр╕Чр╕╡

    // р╕Бр╕│р╕лр╕Щр╕Фр╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Бр╕ер╕░р╕Др╣Ир╕▓ progress р╕Чр╕╡р╣Ир╕кр╕нр╕Фр╕Др╕ер╣Йр╕нр╕Зр╕Бр╕▒р╕Щ
    final options = ["Plan", "Doing", "Review", "Done"];
    final values = {"Plan": 10, "Doing": 50, "Review": 80, "Done": 100};
//р╕Бр╕│р╕лр╕Щр╕Фр╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░ (options) р╣Бр╕ер╕░р╕Др╣Ир╕▓р╣Ар╕Ыр╕нр╕гр╣Мр╣Ар╕Лр╣Зр╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓ (values) р╕Чр╕╡р╣Ир╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕Бр╕▒р╕Щ р╣Ар╕Кр╣Ир╕Щ "Doing" р╣Ар╕Чр╣Ир╕▓р╕Бр╕▒р╕Ъ 50%.
    
    //2. р╕лр╕▓р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣И progress р╕бр╕▓р╕Бр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф (р╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╣Бр╕Чр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕З)
    final representativeProject = projects.reduce( //.reduce(...): р╣Ар╕Ыр╣Зр╕Щр╣Ар╕бр╕Шр╕нр╕Фр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕лр╕▓р╕Др╣Ир╕▓р╣Ар╕Фр╕╡р╕вр╕зр╕Ир╕▓р╕Бр╕ер╕┤р╕кр╕Хр╣М 
      (a, b) => a.progress > b.progress ? a : b, //р╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╕Чр╕╡р╕ер╕░р╕Др╕╣р╣И (р╣Гр╕Щр╕Чр╕╡р╣Ир╕Щр╕╡р╣Йр╕Др╕╖р╕нр╕лр╕▓р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕бр╕╡ progress р╕бр╕▓р╕Бр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф)
    );

    // р╕лр╕▓р╕кр╕Цр╕▓р╕Щр╕░р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Хр╕▒р╕зр╣Бр╕Чр╕Щ
    final current = options.firstWhere( //.firstWhere(...): р╣Гр╕Кр╣Йр╕Др╣Йр╕Щр╕лр╕▓ р╕Кр╕╖р╣Ир╕нр╕кр╕Цр╕▓р╕Щр╕░ ("Plan", "Doing") 
      (o) => values[o] == representativeProject.progress,//р╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕Др╣Ир╕▓ Progress р╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Хр╕▒р╕зр╣Бр╕Чр╕Щ р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕Кр╣Йр╣Ар╕Ыр╣Зр╕Щр╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╣Гр╕Щ Dropdown
      orElse: () => "Plan",
    );//--------2------

    //3. р╣Бр╕кр╕Фр╕З dialog р╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Гр╕лр╕бр╣И
    final selected = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.hourglass_bottom, color: Colors.green),
            const SizedBox(width: 8),
            const Text("р╣Бр╕Бр╣Йр╣Др╕В Progress"),
          ],
        ),
        content: DropdownButton<String>(
          value: current,
          isExpanded: true,
          items: options.map((opt) {
            return DropdownMenuItem<String>(
              value: opt,
              child: Text("$opt (${values[opt]}%)"),
            );
          }).toList(),
          onChanged: (v) => Navigator.pop(context, v),//р╣Ар╕бр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╕Др╣Ир╕▓р╣Гр╕лр╕бр╣И (v) р╕Ир╕░р╕кр╕▒р╣Ир╕Зр╣Гр╕лр╣Й Dialog р╕Ыр╕┤р╕Фр╕ер╕З р╣Бр╕ер╕░р╕кр╣Ир╕Зр╕Др╣Ир╕▓ (v) р╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╕Щр╕▒р╣Йр╕Щр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╣Гр╕лр╣Й selected
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('р╕вр╕Бр╣Ар╕ер╕┤р╕Б'),
          ),
        ],
      ),
    );//-------end--3--------------

    // 4. р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х progress р╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
    if (selected != null && selected != current) { //р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й р╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Гр╕лр╕бр╣Ир╣Бр╕ер╕░р╕кр╕Цр╕▓р╕Щр╕░р╣Гр╕лр╕бр╣Ир╕Щр╕▒р╣Йр╕Щ р╣Бр╕Хр╕Бр╕Хр╣Ир╕▓р╕З р╕Ир╕▓р╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Ар╕Фр╕┤р╕б
      final newProgress = values[selected]!; //р╣Бр╕Ыр╕ер╕Зр╕Кр╕╖р╣Ир╕нр╕кр╕Цр╕▓р╕Щр╕░р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╣Ар╕Ыр╣Зр╕Щр╕Др╣Ир╕▓р╣Ар╕Ыр╕нр╕гр╣Мр╣Ар╕Лр╣Зр╕Щр╕Хр╣М (int)
      
      // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Чр╕╕р╕Бр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕бр╕╡ progress р╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щр╕Бр╕▒р╕Ър╕Хр╕▒р╕зр╣Бр╕Чр╕Щ  р╕зр╕Щр╕ер╕╣р╕Ыр╕Ьр╣Ир╕▓р╕Щ р╕Чр╕╕р╕Бр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М р╣Гр╕Щр╕ер╕┤р╕кр╕Хр╣М
      for (final project in projects) {
        if (project.progress == representativeProject.progress) {//р╕бр╕╡ Progress р╣Ар╕Чр╣Ир╕▓р╕Бр╕▒р╕Ъ Progress р╣Ар╕Фр╕┤р╕бр╕Вр╕нр╕З р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Хр╕▒р╕зр╣Бр╕Чр╕Щ р╕Бр╣Зр╕Ир╕░р╕Цр╕╖р╕нр╕зр╣Ир╕▓р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Щр╕▒р╣Йр╕Щр╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╕╕р╣Ир╕бр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Цр╕╣р╕Бр╕нр╕▒р╕Ыр╣Ар╕Фр╕Х
          // р╣Ар╕гр╕╡р╕вр╕Б callback р╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╣Гр╕Щ parent widget
          if (onProgressUpdate != null) {
            onProgressUpdate!(project, newProgress); //р╣Гр╕Кр╣Й Callback Function р╕Чр╕╡р╣Ир╕гр╕▒р╕Ър╕бр╕▓р╕Ир╕▓р╕Б Widget р╣Бр╕бр╣И р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М р╣Бр╕ер╕░ Progress р╣Гр╕лр╕бр╣И р╣Др╕Ыр╣Гр╕лр╣Й
          }
        }
      }
    }//---------------end 4--------------------
  }//-------------end ЁЯЫая╕П Helper Methods - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н----------------------------

  /// р╕кр╕гр╣Йр╕▓р╕З InfoBox Widget р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤
  /// р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е countdown р╣Бр╕ер╕░ progress
  /// 
  /// @param icon р╣Др╕нр╕Др╕нр╕Щр╕Чр╕╡р╣Ир╕Ир╕░р╣Бр╕кр╕Фр╕З
  /// @param title р╕Кр╕╖р╣Ир╕нр╕Вр╣Йр╕нр╕бр╕╣р╕е
  /// @param value р╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕З
  /// @return Widget InfoBox
  // ЁЯЫая╕П _buildInfoBox: р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕ер╣Ир╕нр╕Зр╕кр╕Цр╕┤р╕Хр╕┤
  
  Widget _buildInfoBox({//р╕Др╣Ир╕▓ 3 р╕нр╕вр╣Ир╕▓р╕З р╣Ар╕Юр╕╖р╣Ир╕нр╕Бр╕│р╕лр╕Щр╕Фр╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕Вр╕нр╕Зр╕Бр╕ер╣Ир╕нр╕Зр╕кр╕Цр╕┤р╕Хр╕┤р╣Бр╕Хр╣Ир╕ер╕░р╕Бр╕ер╣Ир╕нр╕З
    required IconData icon, //р╣Др╕нр╕Др╕нр╕Щр╕Чр╕╡р╣Ир╕Ир╕░р╣Бр╕кр╕Фр╕Зр╕Чр╕╡р╣Ир╕Фр╣Йр╕▓р╕Щр╕Ър╕Щр╕Вр╕нр╕Зр╕Бр╕ер╣Ир╕нр╕З
    required String title, //р╕Кр╕╖р╣Ир╕нр╕Вр╕нр╕Зр╕кр╕Цр╕┤р╕Хр╕┤
    required String value, //р╕Др╣Ир╕▓р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕лр╕гр╕╖р╕нр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Вр╕нр╕Зр╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕▒р╣Йр╕Щ
  }) {
    //ЁЯЦ╝я╕П р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕нр╕нр╕Бр╣Бр╕Ър╕Ъ (UI Structure)
    return Container( //A. Container (р╕Бр╕ер╣Ир╕нр╕Зр╕ар╕▓р╕вр╕Щр╕нр╕Б)
      width: 110, //р╕Др╕зр╕▓р╕бр╕Бр╕зр╣Йр╕▓р╕Зр╕Др╕Зр╕Чр╕╡р╣И 110 р╕лр╕Щр╣Ир╕зр╕в
      padding: const EdgeInsets.all(12), // р╣Ар╕зр╣Йр╕Щр╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕З 12 р╕лр╕Щр╣Ир╕зр╕вр╕ар╕▓р╕вр╣Гр╕Щр╕Бр╕ер╣Ир╕нр╕З
      decoration: BoxDecoration( //р╕Хр╕Бр╣Бр╕Хр╣Ир╕Зр╕гр╕╣р╕Ыр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╕ар╕▓р╕вр╕Щр╕нр╕Б
        color: Colors.green.shade50, // р╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕зр╕нр╣Ир╕нр╕Щ
        borderRadius: BorderRadius.circular(12), //р╕Чр╕│р╣Гр╕лр╣Йр╕бр╕╕р╕бр╕Вр╕нр╕Зр╕Бр╕ер╣Ир╕нр╕Зр╣Вр╕Др╣Йр╕Зр╕бр╕Щ
        boxShadow: const [ //р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Зр╕▓р╣Ар╕ер╣Зр╕Бр╕Щр╣Йр╕нр╕вр╣Гр╕лр╣Йр╕Бр╕▒р╕Ър╕Бр╕ер╣Ир╕нр╕З р╕Чр╕│р╣Гр╕лр╣Йр╕Фр╕╣р╕бр╕╡р╕бр╕┤р╕Хр╕┤р╣Бр╕ер╕░р╕ер╕нр╕вр╕Вр╕╢р╣Йр╕Щр╕бр╕▓р╕Ир╕▓р╕Бр╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕З
          BoxShadow(color: Colors.black12, blurRadius: 4, offset: Offset(2, 2)),
        ],
      ),//---------------------end A----------------------------------------------------
      child: Column( //B. р╣Гр╕Кр╣Й Column р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕╡р╕вр╕Зр╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╣Гр╕Щр╣Бр╕Щр╕зр╕Хр╕▒р╣Йр╕З (р╕Ир╕▓р╕Бр╕Ър╕Щр╕ер╕Зр╕ер╣Ир╕▓р╕З):
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, color: Colors.green), // р╣Др╕нр╕Др╕нр╕Щр╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕з
          const SizedBox(height: 6),
          Text(
            title,
            style: const TextStyle(
              fontWeight: FontWeight.w600,//р╕Хр╕▒р╕зр╕лр╕Щр╕▓р╕Ыр╕▓р╕Щр╕Бр╕ер╕▓р╕З
              fontSize: 13,
              color: Colors.green, // р╕кр╕╡р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕гр╣Ар╕Вр╕╡р╕вр╕з
            ),
          ),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16,
              color: Colors.green, // р╕кр╕╡р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╣Ар╕Вр╕╡р╕вр╕з
            ),
          ),
        ],
      ),//--------------end B --------------------------
    );
  }
}
//--------------------------------------------end ProjectCard -------------------------------------------------------------------------------------------------
/// =======================
/// ЁЯУЕ PROJECT CALENDAR - р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
/// =======================
/// 
/// StatefulWidget р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╣Бр╕ер╕░р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
/// р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕лр╕ер╕▒р╕Б:
/// 1. р╣Бр╕кр╕Фр╕Зр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╕гр╕▓р╕вр╣Ар╕Фр╕╖р╕нр╕Щр╕Юр╕гр╣Йр╕нр╕б event markers
/// 2. р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
/// 3. р╣Бр╕кр╕Фр╕З ProjectCard р╕Юр╕гр╣Йр╕нр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤
/// 4. р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
/// 5. р╕гр╕нр╕Зр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В progress р╣Бр╕ер╕░р╕ер╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б
/// 
/// р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕лр╕ер╕▒р╕Б:
/// - р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Бр╕кр╕Фр╕Зр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Ир╕▓р╕Бр╕лр╕ер╕▓р╕вр╣Бр╕лр╕ер╣Ир╕З (assets + SQLite)
/// - р╕Бр╕▓р╕гр╣Мр╕Фр╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕┤р╕Хр╕┤р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
/// - р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕гр╕▓р╕вр╕зр╕▒р╕Щ
/// - р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
/// - р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╣Бр╕ер╕░р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е

class ProjectCalendar extends StatefulWidget {
  /// р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╣Др╕зр╣Й (р╕Цр╣Йр╕▓р╕бр╕╡) р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Йр╕Юр╕▓р╕░р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Щр╕▒р╣Йр╕Щ
  final Project? selectedProject;

  const ProjectCalendar({super.key, this.selectedProject});

  @override
  State<ProjectCalendar> createState() => _ProjectCalendarState();
}

/// ЁЯПа State Class р╕кр╕│р╕лр╕гр╕▒р╕Ъ ProjectCalendar
/// р╕Ир╕▒р╕Фр╕Бр╕▓р╕г state р╣Бр╕ер╕░р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Вр╕нр╕Зр╕лр╕Щр╣Йр╕▓р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
class _ProjectCalendarState extends State<ProjectCalendar> {
  // ========================================
  // ЁЯУЕ Calendar State Variables - р╕Хр╕▒р╕зр╣Бр╕Ыр╕гр╕кр╕Цр╕▓р╕Щр╕░р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ
  // ========================================
  DateTime _focusedDay = DateTime.now();  /// р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕З focus р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ
  DateTime? _selectedDay; /// р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Б (р╕нр╕▓р╕Ир╣Ар╕Ыр╣Зр╕Щ null)
  List<ImportantDay> allDays = [];  /// р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф (р╕Ир╕▓р╕Б assets + SQLite)
  List<Event> userEvents = []; /// р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ир╕▓р╕Б SQLite
  List<Project> userProjects = [];   /// р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ир╕▓р╕Б SQLite
  List<User> projectMembers = []; /// р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
//-------------------------------------------------------------------------------------
  
  // ========================================
  // ЁЯФз Repository & Service Instances - р╕нр╕┤р╕Щр╕кр╣Бр╕Хр╕Щр╕Лр╣Мр╕Вр╕нр╕З Service
  // ========================================
  
  /// Repository р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е SQLite
  final EventRepository _eventRepo = EventRepository();
  /// Repository р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е SQLite
  final ProjectRepository _projectRepo = ProjectRepository();
  /// Repository р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е SQLite
  final UserRepository _userRepo = UserRepository();
  /// Service р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Хр╕▒р╕зр╕Хр╕Щр╣Бр╕ер╕░р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ
  final AuthService _authService = AuthService();
//--------------------------------------------------------------------
  
  // ========================================
  // ЁЯУК Data Loading Methods - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е
  // ========================================
  
  /// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╣Гр╕Щр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ
  /// р╕гр╕зр╕бр╕Цр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б assets р╣Бр╕ер╕░ SQLite database
  /// 
  /// р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Ф:
  /// 1. р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б assets files (JSON)
  /// 2. р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
  /// 3. р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б SQLite database
  /// 4. р╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Бр╕ер╕░р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щ ImportantDay objects
  //ЁЯУК _loadAllData(): р╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
  
  Future<void> _loadAllData() async {
    try {
      // 1..ЁЯУБ р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Assets Files
      // ========================================
      
      // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М JSON
      final impData = await rootBundle.loadString('assets/important_days.json');
      final kuData = await rootBundle.loadString('assets/ku_calendar.json');
      final evtData = await rootBundle.loadString('assets/events.json');
//rootBundle.loadString(...): р╣Ар╕Ыр╣Зр╕Щр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Гр╕Щр╕Бр╕▓р╕г р╕нр╣Ир╕▓р╕Щр╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓ р╕Вр╕нр╕Зр╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М assets р╕нр╕нр╕Бр╕бр╕▓р╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б (String)
///impData, kuData, evtData р╕Др╕╖р╕нр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б JSON р╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╣Вр╕лр╕ер╕Фр╕бр╕▓
      // р╣Бр╕Ыр╕ер╕З JSON string р╣Ар╕Ыр╣Зр╕Щ List objects
      final impJson = json.decode(impData) as List;
      final kuJson = json.decode(kuData) as List;
      final evtJson = json.decode(evtData) as List;
//json.decode(...) as List: р╣Гр╕Кр╣Йр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ json.decode р╕Ир╕▓р╕Бр╣Др╕ер╕Ър╕гр╕▓р╕гр╕╡ dart:convert р╣Ар╕Юр╕╖р╣Ир╕н р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б JSON р╣Гр╕лр╣Йр╕Бр╕ер╕▓р╕вр╣Ар╕Ыр╣Зр╕Щр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╕нр╕З Dart р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Й
      // ------end  ЁЯУБ р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Assets Files-------

       // ========================================
      // 2.ЁЯФР р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
      
      final currentUser = await _authService.getCurrentUser(); //_authService.getCurrentUser(): р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й Service р╕Бр╕▓р╕гр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Хр╕▒р╕зр╕Хр╕Щ р╣Ар╕Юр╕╖р╣Ир╕нр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Др╕Щр╣Гр╕Фр╕Бр╕│р╕ер╕▒р╕Зр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╕нр╕вр╕╣р╣И
      if (currentUser == null) {
        debugPrint('тЭМ No user logged in');
        return; //р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ (currentUser == null) р╕Ир╕░р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Гр╕Щ Console р╣Бр╕ер╕░р╕лр╕вр╕╕р╕Фр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕╡р╣Йр╕Чр╕▒р╕Щр╕Чр╕╡ р╣Ар╕Юр╕гр╕▓р╕░р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕зр╕Ир╕▓р╕Бр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Фр╣Й
      }//-----------end ЁЯФР р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ--------------------------

      // 3.ЁЯТ╛ р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б SQLite Database
      // р╣Вр╕лр╕ер╕Фр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ир╕▓р╕Б SQLite
      final sqliteEvents = await _eventRepo.loadEvents(currentUser.id!);

      // р╣Вр╕лр╕ер╕Фр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Хр╕▓р╕бр╣Ар╕Зр╕╖р╣Ир╕нр╕Щр╣Др╕В (р╣Ар╕Йр╕Юр╕▓р╕░р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б р╕лр╕гр╕╖р╕нр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф)
      List<Project> sqliteProjects;
      if (widget.selectedProject != null) {
        // р╣Вр╕лр╕ер╕Фр╣Ар╕Йр╕Юр╕▓р╕░р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
        sqliteProjects = [widget.selectedProject!];
      } else {
        // р╣Вр╕лр╕ер╕Фр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Ир╕▓р╕Б SQLite р╕Хр╕▓р╕бр╕Ыр╕Бр╕Хр╕┤ (р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕б user_id)
        sqliteProjects = await _projectRepo.loadProjects(currentUser.id!);
      } //------------------------------ end 3.ЁЯТ╛ р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б SQLite Database-----------------------------

      // ЁЯФД р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ыр╣Зр╕Щ ImportantDay Objects
      //A. р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б JSON Assets impJson kuJson evtJson
      //B. р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ир╕▓р╕Б SQLite
      
       // р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Чр╕▒р╣Ир╕зр╣Др╕Ы (р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕З)
      final impDays = impJson.map(
        (e) => ImportantDay(
          title: e['title'],
          date: e['date'],
          description: e['description'] ?? '',
          color: '#FFEB3B', // р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕З
        ),
      );

      // р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ KU (р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕з)
      final kuDays = kuJson.map(
        (e) => ImportantDay(
          title: e['title'],
          date: e['date'],
          description: e['description'] ?? '',
          color: '#4CAF50', // р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕з
        ),
      );

      // р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е system events (р╕кр╕╡р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щ)
      final sysEvents = evtJson.map(
        (e) => ImportantDay(
          title: e['title'] ?? 'System Event',
          date: e['date'],
          description: e['note'] ?? '',
          color: '#42A5F5', // р╕кр╕╡р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щ
        ),
      );

      // р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ир╕▓р╕Б SQLite (р╕кр╕╡р╕Яр╣Йр╕▓)
      final userEventsFromSQLite = sqliteEvents.map(
        (e) => ImportantDay(
          title: e.title,
          date:
              "${e.date.year.toString().padLeft(4, '0')}-${e.date.month.toString().padLeft(2, '0')}-${e.date.day.toString().padLeft(2, '0')}",
          description: e.description,
          color: '#03A9F4', // р╕кр╕╡р╕Яр╣Йр╕▓
        ),
      );
//----------------end B-------------------
      // C. р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Ир╕▓р╕Б SQLite (р╕кр╕╡р╕бр╣Ир╕зр╕З) 
      final userProjectsFromSQLite = sqliteProjects.map((p) {
        // р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
        String description =
            "Progress: ${p.progress}% | Members: ${p.members.join(', ')}";

        // р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е deadline р╣Бр╕ер╕░ countdown
        if (p.deadline != null) {
          try {
            final deadlineDate = DateTime.parse(p.deadline!);
            final now = DateTime.now();
            final diff = deadlineDate.difference(now).inDays;
            if (diff > 0) {
              description += " | тП░ $diff days left";
            } else if (diff == 0) {
              description += " | тЪая╕П Due today!";
            } else {
              description += " | тЭМ Overdue ${-diff} days";
            }
          } catch (_) {
            description += " | Deadline: ${p.deadline}";
          }
        }

        return ImportantDay(
          title: p.name,
          date:
              p.deadline ??
              "${p.createdAt.year}-${p.createdAt.month}-${p.createdAt.day}",
          description: description,
          color: '#9C27B0', // р╕кр╕╡р╕бр╣Ир╕зр╕З
        );//-------------------end C ------------------------
      });

      // ========================================
      // ЁЯСе р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
      // ========================================
      
      List<User> members = [];
      for (final project in sqliteProjects) {
        for (final memberName in project.members) {
          final member = await _userRepo.getUserByUsername(memberName);
          if (member != null && !members.any((m) => m.id == member.id)) {
            members.add(member);
          }
        }
      }

      // ========================================
      // ЁЯФД р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х State
      // ========================================
      
      setState(() {
        // р╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
        allDays = [
          ...impDays,
          ...kuDays,
          ...sysEvents,
          ...userEventsFromSQLite,
          ...userProjectsFromSQLite,
        ];
        
        // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
        userEvents = sqliteEvents;
        userProjects = sqliteProjects;
        projectMembers = members;
      });
    } catch (e) {
      debugPrint('тЭМ Error loading data: $e');
    }
  }//-----------------end------------------

  // ========================================
  // ЁЯЫая╕П Helper Methods - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н
  // ========================================
  
  /// р╕Фр╕╢р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф
  /// р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕З events р╣Гр╕Щр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ
  /// 
  /// @param day р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
  /// @return List<ImportantDay> р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Вр╕нр╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Щр╕▒р╣Йр╕Щ
  
 // ЁЯУЕ _getDaysFor(DateTime day)
  List<ImportantDay> _getDaysFor(DateTime day) {
    // р╣Бр╕Ыр╕ер╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щ string format (YYYY-MM-DD)
    final dateStr =
        "${day.year.toString().padLeft(4, '0')}-${day.month.toString().padLeft(2, '0')}-${day.day.toString().padLeft(2, '0')}";
    
    // р╕Бр╕гр╕нр╕Зр╕лр╕▓р╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣И
    return allDays.where((e) => e.date == dateStr).toList();
  }//--------------------end ЁЯУЕ _getDaysFor(DateTime day)----------------

  /// р╕ер╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕лр╕гр╕╖р╕нр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
  /// р╕гр╕нр╕Зр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕ер╕Ър╕Чр╕▒р╣Йр╕З user events р╣Бр╕ер╕░ user projects
  /// 
  /// @param day ImportantDay object р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ъ
  
  //ЁЯЧСя╕П _deleteUserEvent(ImportantDay day)
  Future<void> _deleteUserEvent(ImportantDay day) async {
    try {
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Вр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕бр╕кр╕╡
      if (day.color == '#03A9F4') {
        // ЁЯЯж р╕ер╕Ъ User Event (р╕кр╕╡р╕Яр╣Йр╕▓)
        final eventToDelete = userEvents.firstWhere(
          (e) =>
              e.title == day.title &&
              e.description == day.description &&
              "${e.date.year}-${e.date.month}-${e.date.day}" == day.date,
        );
        if (eventToDelete.id != null) {
          await _eventRepo.deleteEvent(eventToDelete.id!);
        }
        setState(() {
          userEvents.removeWhere((e) => e.id == eventToDelete.id);
          allDays.remove(day);
        });
      } else if (day.color == '#9C27B0') {
        // ЁЯЯг р╕ер╕Ъ User Project (р╕кр╕╡р╕бр╣Ир╕зр╕З)
        final projectToDelete = userProjects.firstWhere(
          (p) => p.name == day.title,
        );
        if (projectToDelete.id != null) {
          await _projectRepo.deleteProject(projectToDelete.id!);
        }
        setState(() {
          userProjects.removeWhere((p) => p.id == projectToDelete.id);
          allDays.remove(day);
        });
      }
    } catch (err) {
      debugPrint('тЭМ Delete failed: $err');
    }
  }//---------end ЁЯЧСя╕П _deleteUserEvent(ImportantDay day)----------------------------------------

  /// р╣Бр╕Бр╣Йр╣Др╕В progress р╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Ьр╣Ир╕▓р╕Щ dialog
  /// р╕нр╕Щр╕╕р╕Нр╕▓р╕Хр╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Гр╕лр╕бр╣Ир╕Ир╕▓р╕Б dropdown
  /// 
  /// @param project р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В
  
  // тЬПя╕П _updateProjectProgress(Project project)
  Future<void> _updateProjectProgress(Project project) async {
    // р╕Бр╕│р╕лр╕Щр╕Фр╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Бр╕ер╕░р╕Др╣Ир╕▓ progress р╕Чр╕╡р╣Ир╕кр╕нр╕Фр╕Др╕ер╣Йр╕нр╕Зр╕Бр╕▒р╕Щ р╣Бр╕кр╕Фр╕З Dialog р╣Гр╕лр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Гр╕лр╕бр╣И (Plan, Doing, Review, Done) ...
    final options = ["Plan", "Doing", "Review", "Done"];
    final values = {"Plan": 10, "Doing": 50, "Review": 80, "Done": 100};

    // р╕лр╕▓р╕кр╕Цр╕▓р╕Щр╕░р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
    final current = options.firstWhere(
      (o) => values[o] == project.progress,
      orElse: () => "Plan",
    );

    // р╣Бр╕кр╕Фр╕З dialog р╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Гр╕лр╕бр╣И
    final selected = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("р╣Бр╕Бр╣Йр╣Др╕В Progress: ${project.name}"),
        content: DropdownButton<String>(
          value: current,
          isExpanded: true,
          items: options.map((opt) {
            return DropdownMenuItem<String>(
              value: opt,
              child: Text("$opt (${values[opt]}%)"),
            );
          }).toList(),
          onChanged: (v) => Navigator.pop(context, v),
        ),
      ),
    );

    // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х progress р╕лр╕▓р╕Бр╕бр╕╡р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З
    if (selected != null && selected != current) {
      final newProgress = values[selected]!; // 1. р╕кр╕гр╣Йр╕▓р╕З Project object р╣Гр╕лр╕бр╣Ир╕Фр╣Йр╕зр╕в progress р╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╣Др╕Вр╣Бр╕ер╣Йр╕з
      final updated = project.copyWith(progress: newProgress); // 2. р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕ер╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
      await _projectRepo.updateProject(updated); // 3. р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Лр╣Йр╕│р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Й UI р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х (р╕гр╕зр╕бр╕Цр╕╢р╕З ProjectCard)
      await _loadAllData(); // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И
    }
  }//----------------------end  тЬПя╕П _updateProjectProgress(Project project)----------------

  // ========================================
  // ЁЯЪА Lifecycle Methods - р╕зр╕Зр╕Ир╕гр╕Кр╕╡р╕зр╕┤р╕Хр╕Вр╕нр╕З Widget
  // ========================================
  
  /// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Бр╣Ар╕бр╕╖р╣Ир╕н Widget р╕Цр╕╣р╕Бр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
  /// р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
  @override
  void initState() { //1. р╕зр╕Зр╕Ир╕гр╕Кр╕╡р╕зр╕┤р╕Х (initState)
    super.initState();
    _loadAllData(); // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
  }
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  // ========================================
  // ЁЯОи UI Build Methods - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕З UI
  // ========================================
  
  /// р╕кр╕гр╣Йр╕▓р╕З UI р╕лр╕ер╕▒р╕Бр╕Вр╕нр╕Зр╕лр╕Щр╣Йр╕▓р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
  /// р╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Фр╣Йр╕зр╕в:
  /// 1. AppBar р╕Юр╕гр╣Йр╕нр╕бр╕Ыр╕╕р╣Ир╕бр╕Бр╕ер╕▒р╕Ъ
  /// 2. р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Бр╕кр╕Фр╕Зр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
  /// 3. ProjectCard р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕┤р╕Хр╕┤
  /// 4. р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
  /// 5. р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
  
  @override
  Widget build(BuildContext context) {
    // р╕Фр╕╢р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Нр╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б (р╕лр╕гр╕╖р╕нр╕зр╕▒р╕Щр╕Чр╕╡р╣И focus)
    final selectedList = _getDaysFor(_selectedDay ?? _focusedDay);

    return Scaffold(
      // р╕Бр╕│р╕лр╕Щр╕Фр╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕кр╕╡р╕Др╕гр╕╡р╕б
      backgroundColor: const Color(0xFFF5F1E9),
      
      // ЁЯзн AppBar - р╣Бр╕Цр╕Ър╕Фр╣Йр╕▓р╕Щр╕Ър╕Щ
      appBar: AppBar(
        backgroundColor: Colors.green, // р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕з
        title: const Text('ЁЯУЕ Project Calendar'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => const DashboardPage()),
          ),
        ),
      ),
      // ЁЯУ▒ Body - р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕лр╕ер╕▒р╕Б
      body: SingleChildScrollView(
        child: Column(
          children: [
            const SizedBox(height: 8),

            // ========================================
            // A. ЁЯУЕ р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Бр╕кр╕Фр╕Зр╕зр╕▒р╕Щр╕кр╕│р╕Др╕▒р╕Н
            // ========================================
            SizedBox(
              height: 400, // р╕Бр╕│р╕лр╕Щр╕Фр╕Др╕зр╕▓р╕бр╕кр╕╣р╕Зр╕Др╕Зр╕Чр╕╡р╣И
              child: TableCalendar(
                firstDay: DateTime.utc(2020, 1, 1), // р╕зр╕▒р╕Щр╣Бр╕гр╕Бр╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕Зр╣Др╕Фр╣Й
                lastDay: DateTime.utc(2035, 12, 31), // р╕зр╕▒р╕Щр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕вр╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕Зр╣Др╕Фр╣Й
                focusedDay: _focusedDay, // р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕З focus
                selectedDayPredicate: (day) => isSameDay(_selectedDay, day), // р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
                onDaySelected: (selected, focused) => setState(() {
                  _selectedDay = selected; // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
                  _focusedDay = focused; // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣И focus
                }),
                eventLoader: _getDaysFor, // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Вр╕лр╕ер╕Ф events
                headerStyle: const HeaderStyle(titleCentered: true), // р╕Ир╕▒р╕Фр╕Бр╕╢р╣Ир╕Зр╕Бр╕ер╕▓р╕Зр╕лр╕▒р╕зр╕Вр╣Йр╕н
                calendarBuilders: CalendarBuilders(
                  // р╕кр╕гр╣Йр╕▓р╕З markers р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕З events
                  markerBuilder: (context, date, events) {
                    if (events.isEmpty) return const SizedBox.shrink();
                    final items = events.cast<ImportantDay>();
                    return Positioned(
                      bottom: 4,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: items
                            .map(
                              (e) => Container(
                                width: 6,
                                height: 6,
                                margin: const EdgeInsets.symmetric(
                                  horizontal: 1.5,
                                ),
                                decoration: BoxDecoration(
                                  shape: BoxShape.circle,
                                  // р╣Бр╕Ыр╕ер╕Зр╕кр╕╡ hex р╣Ар╕Ыр╣Зр╕Щ Color object
                                  color: Color(
                                    int.parse(
                                      e.color.replaceFirst('#', '0xff'),
                                    ),
                                  ),
                                ),
                              ),
                            )
                            .toList(),
                      ),
                    );
                  },// ... р╕кр╕гр╣Йр╕▓р╕Зр╕Ир╕╕р╕Фр╕кр╕╡ (markers) р╣Ар╕ер╣Зр╕Бр╣Ж р╣Гр╕Хр╣Йр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕бр╕╡ events ...
                ),
              ),
            ),//-----------------------end A. ЁЯУЕ TableCalendar (р╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щ)-----------------------------

            // ========================================
            // ЁЯУЛ ProjectCard - р╕Бр╕▓р╕гр╣Мр╕Фр╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
            // ========================================
            Padding(
              padding: const EdgeInsets.all(12),
              child: ProjectCard(
                projects: userProjects, // р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
                onTapAppointment: () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => AppointmentPage(
                      selectedDate: _selectedDay ?? _focusedDay, // р╕кр╣Ир╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╣Др╕Ы
                    ),
                  ),
                ),
                // Callback р╕кр╕│р╕лр╕гр╕▒р╕Ър╕нр╕▒р╕Ыр╣Ар╕Фр╕Х progress р╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
                onProgressUpdate: (project, newProgress) async {
                  final updated = project.copyWith(progress: newProgress);
                  await _projectRepo.updateProject(updated);
                  await _loadAllData(); // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И
                },// ... р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х progress р╣Бр╕ер╕░р╣Ар╕гр╕╡р╕вр╕Б _loadAllData() ...
              ),
            ),//-----------------end B. ЁЯУЛ ProjectCard (р╕Бр╕▓р╕гр╣Мр╕Фр╕кр╕Цр╕┤р╕Хр╕┤)---------------------

            // ========================================
            // ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
            // ========================================
            Container( // ... р╕Бр╕▓р╕гр╕Хр╕Бр╣Бр╕Хр╣Ир╕Зр╕Бр╕гр╕нр╕Ъ ...
              height: 200, // р╕Бр╕│р╕лр╕Щр╕Фр╕Др╕зр╕▓р╕бр╕кр╕╣р╕Зр╕Др╕Зр╕Чр╕╡р╣И
              margin: const EdgeInsets.all(12),
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border.all(color: Colors.green),
                borderRadius: BorderRadius.circular(12),
              ),
              child: selectedList.isEmpty
                  ? const Center(child: Text("р╣Др╕бр╣Ир╕бр╕╡р╣Ар╕лр╕Хр╕╕р╕Бр╕▓р╕гр╕Ур╣Мр╕зр╕▒р╕Щр╕Щр╕╡р╣Й"))
                  : ListView.builder(
                      itemCount: selectedList.length,
                      itemBuilder: (_, i) { // ... р╕кр╕гр╣Йр╕▓р╕З Card/ListTile р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б/р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М ...
                        final day = selectedList[i];
                        final isProject = day.color == '#9C27B0'; // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
                        Project? project;
                        
                        // р╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣Мр╕лр╕▓р╕Бр╣Ар╕Ыр╣Зр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
                        if (isProject) {
                          project = userProjects.firstWhere(
                            (p) => p.name == day.title,
                          );
                        }
                        
                        return Card(
                          // р╕Бр╕│р╕лр╕Щр╕Фр╕кр╕╡р╕Хр╕▓р╕бр╕Ыр╕гр╕░р╣Ар╕ар╕Ч (р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М = р╕бр╣Ир╕зр╕З, р╕нр╕╖р╣Ир╕Щр╣Ж = р╣Ар╕Вр╕╡р╕вр╕з)
                          color: isProject
                              ? Colors.purple.shade50
                              : Colors.green.shade50,
                          child: ListTile(
                            leading: Icon(
                              isProject ? Icons.work : Icons.event,
                              color: isProject ? Colors.purple : Colors.green,
                            ),
                            title: Text(
                              day.title,
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            subtitle: Text(day.description),
                            trailing: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [// ... р╕бр╕╡р╕Ыр╕╕р╣Ир╕бр╣Бр╕Бр╣Йр╣Др╕В (р╣Ар╕Йр╕Юр╕▓р╕░р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М) р╣Бр╕ер╕░р╕Ыр╕╕р╣Ир╕бр╕ер╕Ъ (Event/Project) ...
                                // р╕Ыр╕╕р╣Ир╕бр╣Бр╕Бр╣Йр╣Др╕В progress (р╣Ар╕Йр╕Юр╕▓р╕░р╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М)
                                if (isProject)
                                  IconButton(
                                    icon: const Icon(
                                      Icons.edit,
                                      color: Colors.blue,
                                    ),
                                    onPressed: () =>
                                        _updateProjectProgress(project!),
                                  ),
                                // р╕Ыр╕╕р╣Ир╕бр╕ер╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б
                                IconButton(
                                  icon: const Icon(
                                    Icons.delete,
                                    color: Colors.red,
                                  ),
                                  onPressed: () => _deleteUserEvent(day),
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
            ),//---------------end C. ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б (Daily Event List)------------

            // ========================================
            // ЁЯСе р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
            // ========================================
            if (projectMembers.isNotEmpty) ...[
              Container( // ... р╕Бр╕▓р╕гр╕Хр╕Бр╣Бр╕Хр╣Ир╕Зр╕Бр╕гр╕нр╕Ър╕кр╕╡р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щр╕нр╣Ир╕нр╕Щ ...
                margin: const EdgeInsets.all(12),
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50, // р╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕кр╕╡р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щр╕нр╣Ир╕нр╕Щ
                  border: Border.all(color: Colors.blue),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(   // ... р╕лр╕▒р╕зр╕Вр╣Йр╕н "р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М" ...
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // р╕лр╕▒р╕зр╕Вр╣Йр╕нр╣Бр╕кр╕Фр╕Зр╕Ир╕│р╕Щр╕зр╕Щр╕кр╕бр╕▓р╕Кр╕┤р╕Б
                    Row(
                      children: [
                        Icon(Icons.people, color: Colors.blue),
                        const SizedBox(width: 8),
                        Text(
                          'р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М (${projectMembers.length})',
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    
                    // р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Ар╕Ыр╣Зр╕Щ chips
                    Wrap(   // ... р╕кр╕гр╣Йр╕▓р╕З Chip р╣Бр╕кр╕Фр╕Зр╕Кр╕╖р╣Ир╕нр╕кр╕бр╕▓р╕Кр╕┤р╕Б ...
                      spacing: 8,
                      runSpacing: 8,
                      children: projectMembers.map((member) {
                        return Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 6,
                          ),
                          decoration: BoxDecoration(
                            color: Colors.blue.shade100, // р╕кр╕╡р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕кр╕╡р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щр╕нр╣Ир╕нр╕Щ
                            borderRadius: BorderRadius.circular(20), // р╕бр╕╕р╕бр╣Вр╕Др╣Йр╕З
                            border: Border.all(color: Colors.blue.shade300),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                Icons.person,
                                size: 16,
                                color: Colors.blue.shade700,
                              ),
                              const SizedBox(width: 4),
                              Text(
                                member.username,
                                style: TextStyle(
                                  color: Colors.blue.shade700,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ),
              ),
            ],
            const SizedBox(height: 20), // р╣Ар╕Юр╕┤р╣Ир╕бр╕гр╕░р╕вр╕░р╕лр╣Ир╕▓р╕Зр╕Фр╣Йр╕▓р╕Щр╕ер╣Ир╕▓р╕З
          ],
        ),
      ),
    );
  }
}

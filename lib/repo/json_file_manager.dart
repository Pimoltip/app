import 'dart:convert';
import 'dart:io';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';

/// ‚úÖ ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Application Documents Directory
class JsonFileManager {
  final String fileName;

  JsonFileManager(this.fileName);

  /// ‚úÖ path ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô local storage
  Future<File> _getLocalFile() async {
    final dir = await getApplicationDocumentsDirectory();
    return File('${dir.path}/$fileName');
  }

  /// ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List)
  Future<List<dynamic>> readJson() async {
    try {
      final file = await _getLocalFile();
      if (await file.exists()) {
        final content = await file.readAsString();
        if (content.isNotEmpty) return json.decode(content);
      }
    } catch (e) {
      print('‚ùå readJson($fileName) error: $e');
    }
    return [];
  }

  /// ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> writeJson(List<dynamic> data) async {
    try {
      final file = await _getLocalFile();
      await file.writeAsString(json.encode(data), flush: true);
      print('‚úÖ writeJson($fileName) saved successfully');
    } catch (e) {
      print('‚ùå writeJson($fileName) error: $e');
    }
  }

  /// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå
  Future<void> addItem(Map<String, dynamic> newItem) async {
    final data = await readJson();
    data.add(newItem);
    await writeJson(data);
  }

  /// ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON
  Future<void> deleteFile() async {
    final file = await _getLocalFile();
    if (await file.exists()) {
      await file.delete();
      print('üóëÔ∏è Deleted $fileName');
    }
  }

  /// ‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≤‡∏Å assets ‚Üí local (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ)
  Future<void> copyFromAsset(String assetPath) async {
    final file = await _getLocalFile();
    if (!await file.exists()) {
      final data = await rootBundle.loadString(assetPath);
      await file.writeAsString(data, flush: true);
      print('üì• Copied $assetPath ‚Üí ${file.path}');
    }
  }
}
